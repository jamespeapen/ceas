[{"path":"https://jamespeapen.github.io/ceas/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ceas authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jamespeapen.github.io/ceas/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rachel House. Author, maintainer. James Eapen. Author.","code":""},{"path":"https://jamespeapen.github.io/ceas/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"House R, Eapen J (2023). ceas: Cellular Energetics Analysis Software. R package version 0.0.9, https://github.com/jamespeapen/ceas/, https://jamespeapen.github.io/ceas/.","code":"@Manual{,   title = {ceas: Cellular Energetics Analysis Software},   author = {Rachel House and James Eapen},   year = {2023},   note = {R package version 0.0.9, https://github.com/jamespeapen/ceas/},   url = {https://jamespeapen.github.io/ceas/}, }"},{"path":"https://jamespeapen.github.io/ceas/index.html","id":"ceas-","dir":"","previous_headings":"","what":"Cellular Energetics Analysis Software","title":"Cellular Energetics Analysis Software","text":"Cellular Energetics Analysis Software","code":""},{"path":"https://jamespeapen.github.io/ceas/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Cellular Energetics Analysis Software","text":"Analysis visualization cellular energetics data Agilent Seahorse XF96. Cellular energetics cells make, use, distribute units energy (primarily ATP). Measuring real-time cellular energetics essential understanding tissue cell’s bioenergetic state fuel dependencies. Seahorse machine measures cell’s matrix’s oxygen consumption rate (OCR) – proxy oxidative phosphorylation – extracellular acidification rate – proxy glycolysis. package offers flexible fast analysis plotting capabilities data.","code":""},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/index.html","id":"github","dir":"","previous_headings":"Installation","what":"Github","title":"Cellular Energetics Analysis Software","text":"can install Github cloning repo running can also use R devtools package:","code":"git clone https://github.com/jamespeapen/ceas/ R CMD INSTALL ceas devtools::install_github(\"jamespeapen/ceas\")"},{"path":"https://jamespeapen.github.io/ceas/reference/atp_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"ATP Plot — atp_plot","title":"ATP Plot — atp_plot","text":"Generate ATP Plot","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/atp_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ATP Plot — atp_plot","text":"","code":"atp_plot(   energetics,   error_bar = \"ci\",   conf_int = 0.95,   size = 2,   shape = 21,   basal_vs_max = \"basal\",   glyc_vs_resp = \"glyc\" )"},{"path":"https://jamespeapen.github.io/ceas/reference/atp_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ATP Plot — atp_plot","text":"energetics table calculated glycolysis OXPHOS rates. Returned get_energetics error_bar Whether plot error bars standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1 size Size points shape Shape points basal_vs_max Whether plot \"basal\" \"max\" respiration glyc_vs_resp Whether plot glycolysis (\"glyc\")  respiration (\"resp\")","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/atp_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ATP Plot — atp_plot","text":"ggplot","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/atp_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ATP Plot — atp_plot","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics <- get_energetics(partitioned_data, ph = 7.4, pka = 6.093, buffer = 0.1) atp_plot(energetics)   atp_plot(energetics, basal_vs_max = \"max\")   atp_plot(energetics, basal_vs_max = \"basal\", glyc_vs_resp = \"resp\")   # to change fill, the geom_point shape number should be between 15 and 25 atp_plot(energetics, shape = 21) + # filled circle   ggplot2::scale_fill_manual(values = c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\"))   # to change color, use ggplot2::scale_color_manual atp_plot(energetics) +   ggplot2::scale_color_manual(values = c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\"))"},{"path":"https://jamespeapen.github.io/ceas/reference/bioscope_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bioenergetic Scope Plot — bioscope_plot","title":"Bioenergetic Scope Plot — bioscope_plot","text":"Generate Bioenergetic Scope Plot","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/bioscope_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bioenergetic Scope Plot — bioscope_plot","text":"","code":"bioscope_plot(   energetics,   error_bar = \"ci\",   conf_int = 0.95,   size = 2,   basal_shape = 1,   max_shape = 19 )"},{"path":"https://jamespeapen.github.io/ceas/reference/bioscope_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bioenergetic Scope Plot — bioscope_plot","text":"energetics table calculated glycolysis OXPHOS rates. Returned get_energetics error_bar Whether plot error bars standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1 size Size points basal_shape Shape points basal values max_shape Shape points max values bioscope_plot Creates 2D plot visualizing mean standard deviation basal maximal ATP production glycolysis OXPHOS experimental group","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/bioscope_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bioenergetic Scope Plot — bioscope_plot","text":"ggplot","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/bioscope_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bioenergetic Scope Plot — bioscope_plot","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics <- get_energetics(   partitioned_data,   ph = 7.4,   pka = 6.093,   buffer = 0.1 ) bioscope_plot(energetics)   # to change fill, the geom_point shape should be between 15 and 20. # These shapes are filled without border and will correctly show on the legend. bioscope_plot(energetics, size = 3, basal_shape = 2, max_shape = 17) + # empty and filled triangle   ggplot2::scale_fill_manual(     values = c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\")   )   # to change color, use ggplot2::scale_color_manual bioscope_plot(energetics) +   ggplot2::scale_color_manual(     values = c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\")   )"},{"path":"https://jamespeapen.github.io/ceas/reference/ceas-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ceas: Cellular Energetics Analysis Software — ceas-package","title":"ceas: Cellular Energetics Analysis Software — ceas-package","text":"'Analysis visualization cellular energetics data Agilent Seahorse XF96. Cellular energetics cells make, use, distribute units energy (primarily ATP). Measuring real-time cellular energetics essential understanding tissue cell’s bioenergetic state fuel dependencies. Seahorse machine measures cell’s matrix’s oxygen consumption rate (OCR) – proxy oxidative phosphorylation – extracellular acidification rate – proxy glycolysis. package offers flexible fast analysis plotting capabilities data.'","code":""},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/reference/ceas-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ceas: Cellular Energetics Analysis Software — ceas-package","text":"Maintainer: Rachel House rachel.house@vai.org (ORCID) Authors: James Eapen james.eapen@vai.org (ORCID)","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/get_energetics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"Calculates ATP production glycolysis OXPHOS points defined patitioned_data","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/get_energetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"","code":"get_energetics(partitioned_data, ph, pka, buffer)"},{"path":"https://jamespeapen.github.io/ceas/reference/get_energetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"partitioned_data data.table organized Seahorse OCR ECAR rates based timepoints assay cycle. Returned partition_data ph pH value energetics calculation (XF Media, 7.5) pka pKa value energetics calculation (XF Media, 6.063) buffer buffer energetics calculation (XF Media, 0.1 mpH/pmol H+)","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/get_energetics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"data.table glycolysis OXPHOS rates","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/get_energetics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"TODO: check symbols defined Proton production rate (PPR): $$\\text{PPR} = \\frac{\\text{ECAR value}}{\\text{buffer}}$$ $$   \\text{PPR}_{\\text{mito}} = \\frac{10^{\\text{pH}-\\text{pK}_a}}{1+10^{\\text{pH}-\\text{pK}_a}} \\cdot \\frac{\\text{H}^+}{\\text{O}_2} \\cdot \\text{OCR} $$ calculates proton production glucose conversion bicarbonate \\(\\text{H}^+\\) assuming max \\(\\frac{\\text{H}^+}{\\text{O}_2}\\) 1 $$  \\text{PPR}_\\text{glyc} = \\text{PPR} - \\text{PPR}_\\text{resp} $$ calculates proton production glucose conversion lactate + \\(\\text{H}^+\\) Joules ATP (JATP) production: $$   \\text{ATP}_{\\text{glyc}} =    \\Bigl(\\text{PPR}_\\text{glyc} \\cdot \\frac{\\text{ATP}}{\\text{lactate}}\\Bigl) +    \\Bigl(\\text{MITO}_\\text{resp} \\cdot 2 \\cdot \\frac{\\text{P}}{\\text{O}_\\text{glyc}}\\Bigl) $$ $$  \\frac{\\text{ATP}}{\\text{lactate}} = 1 $$ \\(\\frac{\\text{P}}{{\\text{O}_\\text{glyc}}}\\) = 0.167 glucose (0.242 glycogen). $$  \\text{ATP}_\\text{resp} =   \\Bigl(\\text{coupled MITO}_\\text{resp} \\cdot 2 \\cdot \\frac{\\text{P}}{\\text{O}_\\text{oxphos}}\\Bigl) +   \\Bigl(\\text{MITO}_\\text{resp} \\cdot 2 \\cdot \\frac{\\text{P}}{\\text{O}_\\text{TCA}}\\Bigl) $$ \\(\\frac{\\text{P}}{{\\text{O}_\\text{oxphos}}}\\)  = 2.486 \\(\\frac{\\text{P}}{{\\text{O}_\\text{TCA}}}\\) = 0.167.","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/get_energetics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics <- get_energetics(partitioned_data, ph = 7.4, pka = 6.093, buffer = 0.1) head(energetics, n = 10) #>     cell_line ATP_basal_resp ATP_max_resp ATP_basal_glyc ATP_max_glyc #>  1:   Group_1       903.4178     944.6157      176.42439     524.6518 #>  2:   Group_1       900.2175     937.5181      129.69559     442.5421 #>  3:   Group_1      1027.9860    1072.8032      141.43402     472.4431 #>  4:   Group_1       835.1684     875.9062       95.13176     390.3254 #>  5:   Group_1       888.6888     929.8841       87.08441     420.6239 #>  6:   Group_1       907.6305     946.2010      107.80548     485.7402 #>  7:   Group_1       898.6137     934.9272      127.14102     469.7935 #>  8:   Group_1       939.3941     984.5487      114.74865     477.7720 #>  9:   Group_1       852.0317     888.4355      137.66492     504.0603 #> 10:   Group_1       960.6956    1003.8847      103.91464     426.4569"},{"path":"https://jamespeapen.github.io/ceas/reference/get_energetics_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"Calculates mean standard deviation ATP production glycolysis OXPHOS points defined partition_data values calculated using get_energetics function","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/get_energetics_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"","code":"get_energetics_summary(energetics, error_metric = \"ci\", conf_int = 0.95)"},{"path":"https://jamespeapen.github.io/ceas/reference/get_energetics_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"energetics data.table Seahorse OCR ECAR rates (get_energetics) error_metric Whether calculate error standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/get_energetics_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"list groups data","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/get_energetics_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics_list <- get_energetics(partitioned_data, ph = 7.4, pka = 6.093, buffer = 0.1) energetics_summary <- get_energetics_summary(energetics_list) head(energetics_summary[, c(1:5)], n = 10) #>    cell_line count ATP_basal_resp.mean ATP_basal_resp.sd ATP_basal_resp.se #> 1:   Group_1    22            916.9071          60.22935         12.840940 #> 2:   Group_2    24            947.7950          34.48831          7.039897 #> 3:   Group_3    24           1098.4939          43.78564          8.937706 #> 4:   Group_4    22            523.5337          70.74827         15.083581 head(energetics_summary[, c(1, 2, 6, 7)], n = 10) #>    cell_line count ATP_basal_resp.lower_bound ATP_basal_resp.higher_bound #> 1:   Group_1    22                   891.7393                    942.0748 #> 2:   Group_2    24                   933.9971                    961.5930 #> 3:   Group_3    24                  1080.9763                   1116.0114 #> 4:   Group_4    22                   493.9704                    553.0970"},{"path":"https://jamespeapen.github.io/ceas/reference/get_rate_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Rates summary — get_rate_summary","title":"Rates summary — get_rate_summary","text":"Summarize OCR ECAR mean bounded standard deviations standard error confidence intervals","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/get_rate_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rates summary — get_rate_summary","text":"","code":"get_rate_summary(   seahorse_rates,   measure = \"OCR\",   error_metric = \"ci\",   conf_int = 0.95 )"},{"path":"https://jamespeapen.github.io/ceas/reference/get_rate_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rates summary — get_rate_summary","text":"seahorse_rates data.table Seahorse OCR ECAR rates (imported using read_data function) measure Whether plot \"OCR\" \"ECAR\" error_metric Whether calculate error standard deviations (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/get_rate_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rates summary — get_rate_summary","text":"data.table means, standard deviations/standard error bounds around mean(sd confidence intervals)","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/get_rate_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rates summary — get_rate_summary","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) rates <- get_rate_summary(   seahorse_rates,   measure = \"OCR\",   error_metric = \"ci\",   conf_int = 0.95 ) head(rates, n = 10) #>     cell_line Measurement     mean       sd       se lower_bound upper_bound #>  1:   Group_1           1 306.4486 17.65435 2.661494    301.2322    311.6650 #>  2:   Group_2           1 363.0852 23.20204 3.348926    356.5215    369.6490 #>  3:   Group_3           1 409.0223 28.67433 4.138782    400.9104    417.1342 #>  4:   Group_4           1 229.7457 18.53215 2.793827    224.2699    235.2215 #>  5:   Group_1           2 292.2111 16.33149 2.462065    287.3855    297.0366 #>  6:   Group_2           2 345.1178 21.95538 3.168987    338.9067    351.3289 #>  7:   Group_3           2 390.6030 27.84976 4.019766    382.7244    398.4816 #>  8:   Group_4           2 219.6930 16.79214 2.531511    214.7313    224.6547 #>  9:   Group_1           3 288.0009 15.74350 2.373422    283.3491    292.6527 #> 10:   Group_2           3 339.4649 21.40811 3.089995    333.4086    345.5212"},{"path":"https://jamespeapen.github.io/ceas/reference/make_bioscope_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"Wrapper create 2D plot visualizing mean standard deviation basal maximal ATP production glycolysis OXPHOS experimental group Create Bioenergetic scope plot input Seahorse Wave export, long-form rates excel files","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/make_bioscope_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"","code":"make_bioscope_plot(rep_list, ph, pka, buffer, sheet = 2)"},{"path":"https://jamespeapen.github.io/ceas/reference/make_bioscope_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"rep_list list Seahorse Wave excel export files. One file per replicate. Group replicates given experiment single folder, write folder's path \"seahorse_data\". can use `list.files(\"seahorse_data\") \"full.names=TRUE\") get paths files. ph pH value energetics calculation (XF Media, 7.5) pka pKa value energetics calculation (XF Media, 6.063) buffer buffer energetics calculation (XF Media, 0.1 mpH/pmol H+) sheet number excel sheet containing long-form Seahorse data. Default 2 long-form output Seahorse Wave sheet 2","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/make_bioscope_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"ggplot","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/make_bioscope_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) make_bioscope_plot(rep_list, ph = 7.4, pka = 6.093, buffer = 0.1)"},{"path":"https://jamespeapen.github.io/ceas/reference/partition_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Organize Seahorse Data — partition_data","title":"Organize Seahorse Data — partition_data","text":"Organizes Seahorse OCR ECAR rates based defined time points (.e. Measurement column) experiment. time point can specified modifying Mito Glyco Stress Test (.e. 3 measurements per cycle X measurements)","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/partition_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organize Seahorse Data — partition_data","text":"","code":"partition_data(   seahorse_rates,   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc_tp = 3,   glucose_glyc_tp = 6,   max_glyc_tp = 8 )"},{"path":"https://jamespeapen.github.io/ceas/reference/partition_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organize Seahorse Data — partition_data","text":"seahorse_rates data.table Seahorse OCR ECAR rates (imported using read_data function) basal_tp Basal respiration time point. Must less uncoupled_tp uncoupled_tp ATP-coupled respiration time point. Must less maxresp_tp maxresp_tp Maximal uncoupled respiration time point. Must less nonmito_tp nonmito_tp Non-mitochondrial respiration time point. Must larger maxresp_tp no_glucose_glyc_tp glucose added acidification time point. Must less glucose_glyc_tp glucose_glyc_tp Glucose-associated acidification time point. Must less max_glyc_tp max_glyc_tp Maximal acidification time point. Must less twodg_glyc_tp","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/partition_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organize Seahorse Data — partition_data","text":"list named time points assay cycle","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/partition_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Organize Seahorse Data — partition_data","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates)"},{"path":"https://jamespeapen.github.io/ceas/reference/rate_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Rate plot — rate_plot","title":"Rate plot — rate_plot","text":"Generate OCR ECAR plots","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/rate_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rate plot — rate_plot","text":"","code":"rate_plot(seahorse_rates, measure = \"OCR\", error_bar = \"ci\", conf_int = 0.95)"},{"path":"https://jamespeapen.github.io/ceas/reference/rate_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rate plot — rate_plot","text":"seahorse_rates data.table Seahorse OCR ECAR rates (imported using read_data function) measure Whether plot \"OCR\" \"ECAR\" error_bar Whether plot error bars standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/rate_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rate plot — rate_plot","text":"ggplot","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/rate_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rate plot — rate_plot","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) rate_plot(seahorse_rates, measure = \"OCR\", error_bar = \"ci\", conf_int = 0.95)"},{"path":"https://jamespeapen.github.io/ceas/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Seahorse Wave Excel File — read_data","title":"Read Seahorse Wave Excel File — read_data","text":"Reads input seahore data excel Seahorse Wave File","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Seahorse Wave Excel File — read_data","text":"","code":"read_data(rep_list, sheet = 2)"},{"path":"https://jamespeapen.github.io/ceas/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Seahorse Wave Excel File — read_data","text":"rep_list list Seahorse Wave excel export files. One file per replicate. data directory called \"seahorse_data\", use list.files(\"seahorse_data\", pattern = \"*.xlsx\", full.names = TRUE) make list excel files. sheet number excel sheet containing long-form Seahorse data. Default 2 long-form output Seahorse Wave sheet 2","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Seahorse Wave Excel File — read_data","text":"seahorse_rates table","code":""},{"path":"https://jamespeapen.github.io/ceas/reference/read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Seahorse Wave Excel File — read_data","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) head(seahorse_rates, n = 10) #>     Measurement Well     Time      OCR     ECAR      PER  cell_line assay_type #>  1:           1  A01 1.304765   0.0000  0.00000   0.0000 Background       <NA> #>  2:           1  A02 1.304765 305.2426 30.64529 334.4771    Group_1       MITO #>  3:           1  A03 1.304765 307.9862 33.27668 358.4754    Group_1       MITO #>  4:           1  A04 1.304765 339.3399 49.17751 503.4910    Group_2       MITO #>  5:           1  A05 1.304765 321.9398 47.94602 492.2597    Group_2       MITO #>  6:           1  A06 1.304765 323.7962 46.84232 482.1940    Group_2       MITO #>  7:           1  A07 1.304765 379.1455 46.81741 481.9668    Group_3       MITO #>  8:           1  A08 1.304765 391.1478 50.14648 512.3280    Group_3       MITO #>  9:           1  A09 1.304765 393.4523 52.54649 534.2160    Group_3       MITO #> 10:           1  A10 1.304765 217.0543 29.11793 320.5476    Group_4       MITO #>     replicate #>  1:         1 #>  2:         1 #>  3:         1 #>  4:         1 #>  5:         1 #>  6:         1 #>  7:         1 #>  8:         1 #>  9:         1 #> 10:         1"}]

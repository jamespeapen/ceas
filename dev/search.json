[{"path":"https://jamespeapen.github.io/ceas/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ceas authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Getting started with CEAS","text":"","code":"library(ceas) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"importing-seahorse-rates-data","dir":"Articles","previous_headings":"","what":"Importing Seahorse rates data","title":"Getting started with CEAS","text":"read_data function takes list Excel files. easy way get list put data directory list contents. use package’s internal datasets, list.files take directory name first argument. data requires following columns: Measurement, Well, Group, Time, OCR, ECAR, PER. Group column needs format biological_group<space>Assay_type shown . Upon reading read_data, Group column split two group assay columns space. output format can set Seahorse machine starting experiment. already data, column converted format work ceas.","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) raw_data <- readxl::read_excel(rep_list[1], sheet = 2) knitr::kable(head(raw_data)) seahorse_rates <- read_data(rep_list) knitr::kable(head(seahorse_rates))"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"normalization","dir":"Articles","previous_headings":"Importing Seahorse rates data","what":"Normalization","title":"Getting started with CEAS","text":"two types normalization involved Seahorse data analysis. One background normalization done Wave software. ceas produce warning finds “Background” data 0 (see first row table ). biological normalization based cell count mass protein. data already biologically normalized, need CSV file containing either experimental groups wells cell counts \\(\\mu\\)g protein format: normalizing experimental group normalizing well ceas also two normalizing methods set norm_method argument: \"minimum\": using minimum measure column calculating normalization constant. row Seahorse data divided corresponding experimental group well normalization constant. \"self\": raw value measure column. experimental group well, rows Seahorse data divided corresponding measure value. normalization CSV file’s full path may passed read_data() using norm argument along norm_column either \"exp_group\" \"well\" norm_method either \"self\" \"minimum\".","code":"norm_csv <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"norm.csv\", full.names = TRUE) norm_csv #> [1] \"/home/runner/work/_temp/Library/ceas/extdata/norm.csv\"      #> [2] \"/home/runner/work/_temp/Library/ceas/extdata/well_norm.csv\" exp_group_norm <- norm_csv[1] well_norm <- norm_csv[2]  read.csv(exp_group_norm) |> knitr::kable(caption = \"For normalizing by experimental group\") read.csv(well_norm) |> head() |> knitr::kable(caption = \"For normalizing by well\") read_data(     rep_list,     norm = exp_group_norm,     norm_column = \"exp_group\",     norm_method = \"self\" ) |> head() |> knitr::kable()"},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"partitioning-data","dir":"Articles","previous_headings":"Calculating energetics","what":"Partitioning data","title":"Getting started with CEAS","text":"Note: use term ‘max’ package documentation mean maximal experimental OCR ECAR values rather absolute biological maximums. energetics calculation workflow involves partitioning data time point assay intervals.","code":"partitioned_data <- partition_data(seahorse_rates)"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"alternative-data-formats","dir":"Articles","previous_headings":"Calculating energetics > Partitioning data","what":"Alternative data formats","title":"Getting started with CEAS","text":"default options set experiment mitochondrial glycolysis assay, mitochondrial assay glycolysis assay, assay_types list parameter can modified account . Mito + Glyco (default) Data form Mookerjee et al. (2017) Just Mito Respiratory control ratio (RCR) glycolytic capacity (GC) assay","code":"partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"MITO\",     uncoupled = \"MITO\",     maxresp = \"MITO\",     nonmito = \"MITO\",     no_glucose_glyc = \"GLYCO\",     glucose_glyc = \"GLYCO\",     max_glyc = \"GLYCO\"   ),   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc_tp = 3,   glucose_glyc_tp = 6,   max_glyc_tp = 8 ) partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"RefAssay\",     uncoupled = \"RefAssay\",     maxresp = NA,     nonmito = \"RefAssay\",     no_glucose_glyc = \"RefAssay\",     glucose_glyc = \"RefAssay\",     max_glyc = NA   ),   basal_tp = 5,   uncoupled_tp = 10,   nonmito_tp = 12,   maxresp = NA,   no_glucose_glyc_tp = 1,   glucose_glyc_tp = 5,   max_glyc = NA ) partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"MITO\",     uncoupled = \"MITO\",     maxresp = \"MITO\",     nonmito = \"MITO\",     no_glucose_glyc = NA,     glucose_glyc = \"MITO\",     max_glyc = NA   ),   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc_tp = NA,   glucose_glyc_tp = 3,   max_glyc_tp = NA ) partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"RCR\",     uncoupled = \"RCR\",     maxresp = \"RCR,\"     nonmito = \"RCR\",     no_glucose_glyc = NA,     glucose_glyc = \"GC\",     max_glyc = \"GC\"   ),   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc = NA,   glucose_glyc_tp = 3,   max_glyc_tp = 9 )"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"section","dir":"Articles","previous_headings":"","what":"Getting started with CEAS","title":"Getting started with CEAS","text":"Note time point parameters (maxresp_tp no_glucose_glyc_tp) also need changed accordingly. get_energetics function requires pH, pK\\(_a\\) buffer values. information calculations see article ATP calculations.","code":"energetics <- get_energetics(partitioned_data, ph = 7.4, pka = 6.093, buffer = 0.10)"},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"bioenergetic-scope-plot","dir":"Articles","previous_headings":"Plotting","what":"Bioenergetic scope plot","title":"Getting started with CEAS","text":"bioscope_plot function plots 2D representation group “bioenergetic scope.” Bioenergetic scope describes theoretical energetic space matrix operates. bioenergetic scope coordinates JATP OXPHOS y-axis JATP glycolysis x-axis. points represent mean basal /max JATP OXPHOS glycolysis vertical horizontal lines represent standard deviation confidence interval JATP OXPHOS glycolysis, respectively. Replicates combined Replicates random effects Replicates separated Bioenergetic scope replicates combined Bioenergetic scope based mixed-effects model replicates random effect Bioenergetic scope replicates separated","code":"bioscope <- bioscope_plot(   energetics,   model = \"ols\",   sep_reps = FALSE ) bioscope bioscope_plot(energetics, sep_reps = FALSE, model = \"mixed\") bioscope_plot(energetics, sep_reps = TRUE, model = \"ols\")"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"rate-plots","dir":"Articles","previous_headings":"Plotting","what":"Rate plots","title":"Getting started with CEAS","text":"rate_plot function provides overview OCR ECAR assay type time, enables cross-group energetic comparisons addition energetic-modulating compounds. rate_plot line represents mean group OCR ECAR sequential measurements (x-axis) shaded variance region represents standard deviation specified confidence interval.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"oxygen-consumption-rate-ocr","dir":"Articles","previous_headings":"Plotting > Rate plots","what":"Oxygen consumption rate (OCR)","title":"Getting started with CEAS","text":"Replicates combined Replicates random effects Replicates separated OCR replicates combined OCR based mixed-effects model OCR replicates separated","code":"ocr <- rate_plot(   seahorse_rates,   measure = \"OCR\",   assay = \"MITO\",   model = \"ols\",   sep_reps = FALSE ) ocr rate_plot(   seahorse_rates,   measure = \"OCR\",   assay = \"MITO\",   model = \"mixed\",   sep_reps = FALSE ) #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') rate_plot(   seahorse_rates,   measure = \"OCR\",   assay = \"MITO\",   model = \"ols\",   sep_reps = TRUE,   linewidth = 1 )"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"extracellular-acidification-rate-ecar","dir":"Articles","previous_headings":"Plotting > Rate plots","what":"Extracellular Acidification Rate (ECAR)","title":"Getting started with CEAS","text":"Replicates combined Replicates random effects Replicates separated ECAR replicates combined ECAR based mixed-effects model ECAR replicates separated","code":"ecar <- rate_plot(   seahorse_rates,   measure = \"ECAR\",   assay = \"GLYCO\",   model = \"ols\",   sep_reps = FALSE ) ecar rate_plot(   seahorse_rates,   measure = \"ECAR\",   assay = \"GLYCO\",   model = \"mixed\",   sep_reps = FALSE ) #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') rate_plot(   seahorse_rates,   measure = \"ECAR\",   assay = \"GLYCO\",   model = \"ols\",   sep_reps = TRUE,   linewidth = 1  )"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"atp-plots","dir":"Articles","previous_headings":"Plotting","what":"ATP plots","title":"Getting started with CEAS","text":"atp_plot function plots group JATP values, enables cross-group OXPHOS glycolytic JATP comparisons basal max conditions. atp_plot symbols represent mean basal max JATP OXPHOS glycolysis, crossbar boundaries represent standard deviation confidence interval JATP variance. Basal glycolysis Basal respiration Maximal glycolysis Maximal respiration JATP basal glycolysis replicates combined JATP basal respiration replicates separated JATP maximal glycolysis mixed-effects model JATP maximal respiration replicates combined","code":"basal_glyc <- atp_plot(   energetics,   basal_vs_max = \"basal\",   glyc_vs_resp = \"glyc\",   sep_reps = FALSE ) basal_glyc atp_plot(   energetics,   basal_vs_max = \"basal\",   glyc_vs_resp = \"resp\",   model = \"ols\",   sep_reps = TRUE ) atp_plot(   energetics,   basal_vs_max = \"max\",   glyc_vs_resp = \"glyc\",   model = \"mixed\",   sep_reps = FALSE ) #> boundary (singular) fit: see help('isSingular') atp_plot(   energetics,   basal_vs_max = \"max\",   glyc_vs_resp = \"resp\",   model = \"ols\",   sep_reps = TRUE )"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"customizing-plots","dir":"Articles","previous_headings":"Plotting","what":"Customizing plots","title":"Getting started with CEAS","text":"CEAS designed work existing ggplot2 customization functionality doesn’t include shape size options plots. example, change colors used plot, simply make plot add custom colors ’d like:","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"colors","dir":"Articles","previous_headings":"Plotting > Customizing plots","what":"Colors","title":"Getting started with CEAS","text":"","code":"custom_colors <- c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\") bioscope + ggplot2::scale_color_manual(   values = custom_colors ) ocr + ggplot2::scale_color_manual(   values = custom_colors )"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"labels","dir":"Articles","previous_headings":"Plotting > Customizing plots","what":"Labels","title":"Getting started with CEAS","text":"Change axis labels Change label size","code":"ecar +     ggplot2::labs(x = \"Time points\") basal_glyc +     ggplot2::theme(axis.text = ggplot2::element_text(size = 20))"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"editing-functions","dir":"Articles","previous_headings":"Plotting > Customizing plots","what":"Editing functions","title":"Getting started with CEAS","text":"working making plots customizable possible. However, options set calls plotting functions ggplot2 functions, can get code used make plots running function name without parenthesis modify . , since every step ceas workflow provides dataset, can run modified function custom plotting functions datasets. RStudio, can run utils::edit modify function.","code":"rate_plot function (seahorse_rates, measure = \"OCR\", assay = \"MITO\", model = \"ols\",      error_bar = \"ci\", conf_int = 0.95, group_label = \"Experimental group\",      linewidth = 2, sep_reps = FALSE, ci_method = \"Wald\")  {     stopifnot(`'measure' should be 'OCR' or 'ECAR'` = measure %in%          c(\"OCR\", \"ECAR\"))     stopifnot(`'model' should be 'ols' or 'mixed'` = model %in%          c(\"ols\", \"mixed\"))     stopifnot(`cannot run mixed-effects model with \\`sep_reps = TRUE\\`` = (model ==          \"mixed\" & !sep_reps) | (model == \"ols\"))     stopifnot(`'error_bar' should be 'sd' or 'ci'` = error_bar %in%          c(\"sd\", \"ci\"))     stopifnot(`'conf_int' should be between 0 and 1` = conf_int >          0 && conf_int < 1)     data_cols <- c(\"Measurement\", \"Well\", \"OCR\", \"ECAR\", \"PER\",          \"exp_group\", \"assay_type\", \"replicate\")     missing_cols <- setdiff(data_cols, colnames(seahorse_rates))     if (length(missing_cols) != 0) {         stop(paste0(\"'\", missing_cols, \"'\", \" column was not found in input data\\n\"))     }     Measurement <- NULL     exp_group <- NULL     lower_bound <- NULL     upper_bound <- NULL     multi_rep <- length(unique(seahorse_rates$replicate)) > 1     if (!sep_reps && missing(sep_reps) && multi_rep)          warning(sep_reps_warning)     plot_data <- get_rate_summary(seahorse_rates, measure, assay,          model, error_bar, conf_int, sep_reps)     y_labels <- list(OCR = paste0(assay, \" OCR (pmol/min)\"),          ECAR = paste0(assay, \" ECAR (mpH/min)\"))     p <- ggplot(plot_data, aes(x = Measurement, y = mean, color = exp_group,          group = if (sep_reps && multi_rep)              interaction(exp_group, replicate)         else exp_group, fill = exp_group)) + geom_ribbon(aes(ymin = lower_bound,          ymax = upper_bound), alpha = 0.2, color = NA) + scale_x_continuous(breaks = seq(1,          12, by = 1)) + xlab(\"Measurement\") + ylab(y_labels[measure]) +          labs(color = group_label, fill = group_label, linetype = \"Replicate\") +          theme_bw()     if (sep_reps && multi_rep) {         p + geom_line(aes(linetype = replicate), linewidth = linewidth)     }     else {         p + geom_line(linewidth = linewidth)     } } edit(rate_plot)"},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rachel House. Author, maintainer. James P. Eapen. Author. Hui Shen. Funder. Carrie R. Graveel. Funder. Matthew R. Steensma. Funder. . Copyright holder.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rachel J. House, James P. Eapen, Hui Shen, Carrie R. Graveel, Matthew R. Steensma (2024). ceas: R package Seahorse data analysis visualization Bioinformatics, 40(8), btae503 doi: 10.1093/bioinformatics/btae503","code":"@Article{,   author = {Rachel (Rae) J. House and James P. Eapen and Hui Shen and Carrie R. Graveel and Matthew R. Steensma},   title = {ceas: An R package for Seahorse data analysis and visualization},   journal = {Bioinformatics},   year = {2024},   volume = {40},   number = {8},   pages = {btae503},   doi = {10.1093/bioinformatics/btae503},   url = {https://jamespeapen.github.io/ceas/}, }"},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"ceas-","dir":"","previous_headings":"","what":"Cellular Energetics Analysis Software","title":"Cellular Energetics Analysis Software","text":"Cellular Energetics Analysis Software","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Cellular Energetics Analysis Software","text":"Measuring cellular energetics essential understanding matrix’s (e.g. cell, tissue biofluid) metabolic state. Agilent Seahorse machine common method measure real-time cellular energetics, existing analysis tools highly manual lack functionality. Cellular Energetics Analysis Software (ceas) R package fills analytical gap providing modular automated Seahorse data analysis visualization using methods described Mookerjee et al. (2017).","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"pronunciation","dir":"","previous_headings":"Description","what":"Pronunciation","title":"Cellular Energetics Analysis Software","text":"‘ceas’ pronounced like word ‘seas’ (siːz, SEEZ).","code":""},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"cran","dir":"","previous_headings":"Installation","what":"CRAN","title":"Cellular Energetics Analysis Software","text":"","code":"install.packages(\"ceas\")"},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"github","dir":"","previous_headings":"Installation","what":"Github","title":"Cellular Energetics Analysis Software","text":"can install release development versions GitHub cloning repo. code main branch sync CRAN releases dev branch latest updates. Documentation dev branch can found dev page website (/dev). can also use R devtools package: pak:","code":"git clone https://github.com/jamespeapen/ceas/ git clone -b dev https://github.com/jamespeapen/ceas/ # dev version R CMD INSTALL ceas devtools::install_github(\"jamespeapen/ceas\") devtools::install_github(\"jamespeapen/ceas\", ref = \"dev\") # dev version pak::pkg_install(\"jamespeapen/ceas\") pak::pkg_install(\"jamespeapen/ceas@dev\") # dev version"},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Cellular Energetics Analysis Software","text":"user guide available package website. Bug reports may submitted GitHub issues.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Cellular Energetics Analysis Software","text":"use ceas please cite Rachel (Rae) J House, James P Eapen, Hui Shen, Carrie R Graveel, Matthew R Steensma (2024). ceas: R package Seahorse data analysis visualization, Bioinformatics, 40(8), btae503","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Cellular Energetics Analysis Software","text":"Submit patches using GitHub pull requests sending patch file james.eapen@vai.org. follow tidyverse style guide using styler lintr.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/atp_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"ATP Plot — atp_plot","title":"ATP Plot — atp_plot","text":"Generate ATP Plot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/atp_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ATP Plot — atp_plot","text":"","code":"atp_plot(   energetics,   model = \"ols\",   error_bar = \"ci\",   conf_int = 0.95,   size = 2,   shape = 16,   basal_vs_max = \"basal\",   glyc_vs_resp = \"glyc\",   group_label = \"Experimental group\",   sep_reps = FALSE,   ci_method = \"Wald\" )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/atp_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ATP Plot — atp_plot","text":"energetics table calculated glycolysis OXPHOS rates. Returned get_energetics model linear model used estimate mean confidence intervals: ordinary least squares (\"ols\") mixed-effects (\"mixed\") error_bar Whether plot error bars standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1 size Size points shape Shape points basal_vs_max Whether plot \"basal\" \"max\" respiration glyc_vs_resp Whether plot glycolysis (\"glyc\")  respiration (\"resp\") group_label Label experimental group populate legend title sep_reps Whether calculate summary statistics groups replicates combined. current default FALSE combines replicates, future releases default TRUE providing replicate-specific summaries. ci_method method used compute confidence intervals mixed-effects model: \"Wald\", \"profile\", \"boot\" passed lme4::confint.merMod().","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/atp_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ATP Plot — atp_plot","text":"ggplot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/atp_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ATP Plot — atp_plot","text":"Note: use term 'max' package documentation mean maximal experimental OCR ECAR values rather absolute biological maximums.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/atp_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ATP Plot — atp_plot","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics <- get_energetics(   partitioned_data,   ph = 7.4,   pka = 6.093,   buffer = 0.1 ) atp_plot(energetics, sep_reps = FALSE)   atp_plot(energetics, basal_vs_max = \"max\", sep_reps = FALSE)   atp_plot(   energetics,   basal_vs_max = \"basal\",   glyc_vs_resp = \"resp\",   sep_reps = TRUE )  # to change fill, the geom_point shape number should be between 15 and 25 atp_plot(   energetics,   sep_reps = FALSE ) +   ggplot2::scale_fill_manual(     values = c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\")   )   # to change color, use ggplot2::scale_color_manual atp_plot(energetics, sep_reps = FALSE) +   ggplot2::scale_color_manual(     values = c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\")   )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/bioscope_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bioenergetic Scope Plot — bioscope_plot","title":"Bioenergetic Scope Plot — bioscope_plot","text":"Generate Bioenergetic Scope Plot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/bioscope_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bioenergetic Scope Plot — bioscope_plot","text":"","code":"bioscope_plot(   energetics,   model = \"ols\",   error_bar = \"ci\",   conf_int = 0.95,   size = 2,   basal_shape = 1,   max_shape = 19,   group_label = \"Experimental Group\",   sep_reps = FALSE,   ci_method = \"Wald\" )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/bioscope_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bioenergetic Scope Plot — bioscope_plot","text":"energetics table calculated glycolysis OXPHOS rates. Returned get_energetics model linear model used estimate mean confidence intervals: ordinary least squares (\"ols\") mixed-effects (\"mixed\") error_bar Whether plot error bars standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1 size Size points basal_shape Shape points basal values max_shape Shape points max values group_label Label experimental group populate legend title sep_reps Whether calculate summary statistics groups replicates combined. current default FALSE combines replicates, future releases default TRUE providing replicate-specific summaries. ci_method method used compute confidence intervals mixed-effects model: \"Wald\", \"profile\", \"boot\" passed lme4::confint.merMod(). bioscope_plot Creates 2D plot visualizing mean standard deviation basal maximal ATP production glycolysis OXPHOS experimental group","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/bioscope_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bioenergetic Scope Plot — bioscope_plot","text":"ggplot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/bioscope_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bioenergetic Scope Plot — bioscope_plot","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics <- get_energetics(   partitioned_data,   ph = 7.4,   pka = 6.093,   buffer = 0.1 ) bioscope_plot(energetics, sep_reps = FALSE)   # to change fill, the geom_point shape should be between 15 and 20. # These shapes are filled without border and will correctly show on the legend. bioscope_plot(   energetics,   sep_reps = TRUE,   size = 3,   basal_shape = 2,   max_shape = 17 # empty and filled triangle ) +   ggplot2::scale_fill_manual(     values = c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\")   )   # to change color, use ggplot2::scale_color_manual bioscope_plot(energetics, sep_reps = FALSE) +   ggplot2::scale_color_manual(     values = c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\")   )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/ceas-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ceas: Cellular Energetics Analysis Software — ceas-package","title":"ceas: Cellular Energetics Analysis Software — ceas-package","text":"Measuring cellular energetics essential understanding matrix’s (e.g. cell, tissue biofluid) metabolic state. Agilent Seahorse machine common method measure real-time cellular energetics, existing analysis tools highly manual lack functionality. Cellular Energetics Analysis Software (ceas) R package fills analytical gap providing modular automated Seahorse data analysis visualization using methods described Mookerjee et al. (2017) doi:10.1074/jbc.m116.774471 .","code":""},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/dev/reference/ceas-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ceas: Cellular Energetics Analysis Software — ceas-package","text":"Maintainer: Rachel House rachel.house@vai.org (ORCID) Authors: James P. Eapen james.eapen@vai.org (ORCID) contributors: Hui Shen hui.shen@vai.org (ORCID) [funder] Carrie R. Graveel carrie.graveel@vai.org (ORCID) [funder] Matthew R. Steensma matthew.steensma@vai.org (ORCID) [funder] Van Andel Institute [copyright holder]","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/energetics_lme_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mean and confidence intervals from energetics mixed-effects models — energetics_lme_summary","title":"Get mean and confidence intervals from energetics mixed-effects models — energetics_lme_summary","text":"Runs linear mixed-effects models ATP measure columns get_energetics replicates random-effect. Estimates mean confidence intervals ATP production glycolysis OXPHOS points defined partition_data","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/energetics_lme_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mean and confidence intervals from energetics mixed-effects models — energetics_lme_summary","text":"","code":"energetics_lme_summary(atp_col, energetics, conf_int, ci_method)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/energetics_lme_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mean and confidence intervals from energetics mixed-effects models — energetics_lme_summary","text":"atp_col column name ATP measure - one \"ATP_basal_resp\", \"ATP_max_resp\", \"ATP_basal_glyc\", \"ATP_max_glyc\" energetics data.table Seahorse OCR ECAR rates (get_energetics) conf_int confidence interval percentage. 0 1 ci_method method used compute confidence intervals mixed-effects model: \"Wald\", \"profile\", \"boot\" passed lme4::confint.merMod().","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/energetics_lme_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mean and confidence intervals from energetics mixed-effects models — energetics_lme_summary","text":"data.table mean confidence interval bounds experimental group","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/energetics_lme_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get mean and confidence intervals from energetics mixed-effects models — energetics_lme_summary","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics <- get_energetics(   partitioned_data,   ph = 7.4,   pka = 6.093,   buffer = 0.1 ) # Only for one column. For the full energetics table run # `get_energetics_summary` with `model = \"mixed\"`. energetics_lme_summary(   \"ATP_max_resp\",   energetics,   conf_int = 0.95,   ci_method = \"Wald\" ) #>    exp_group ATP_max_resp.mean ATP_max_resp.higher_bound #>       <char>             <num>                     <num> #> 1:   Group_1         1141.1589                 1169.8792 #> 2:   Group_2         1193.9108                 1230.4585 #> 3:   Group_3         1350.6716                 1387.2193 #> 4:   Group_4          620.7805                  658.1142 #>    ATP_max_resp.lower_bound #>                       <num> #> 1:                1112.4385 #> 2:                1157.3631 #> 3:                1314.1239 #> 4:                 583.4467"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/energetics_ols_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ordinary least squares mean and confidence intervals from energetics — energetics_ols_summary","title":"Get ordinary least squares mean and confidence intervals from energetics — energetics_ols_summary","text":"Helper function calculate mean standard deviation ATP production glycolysis OXPHOS points defined partition_data values calculated using get_energetics function. called get_energetics_summary function operaes vector without grouping get_energetics .","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/energetics_ols_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ordinary least squares mean and confidence intervals from energetics — energetics_ols_summary","text":"","code":"energetics_ols_summary(atp_col, error_metric, conf_int)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/energetics_ols_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ordinary least squares mean and confidence intervals from energetics — energetics_ols_summary","text":"atp_col column name ATP measure - one \"ATP_basal_resp\", \"ATP_max_resp\", \"ATP_basal_glyc\", \"ATP_max_glyc\" error_metric Whether calculate error standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/energetics_ols_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ordinary least squares mean and confidence intervals from energetics — energetics_ols_summary","text":"data.table mean confidence interval bounds experimental group","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/energetics_ols_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ordinary least squares mean and confidence intervals from energetics — energetics_ols_summary","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics <- get_energetics(partitioned_data, ph = 7.4, pka = 6.093, buffer = 0.1) # Only for one row and across all groups and replicates. # For the full correctly grouped energetics table run # `get_energetics_summary` with `model = \"ols\"`. energetics_ols_summary(energetics$ATP_max_resp, error_metric = \"ci\", conf_int = 0.95) #> $mean #> [1] 1085.137 #>  #> $sd #> [1] 280.1745 #>  #> $se #> [1] 29.21021 #>  #> $lower_bound #> [1] 1027.886 #>  #> $higher_bound #> [1] 1142.388 #>"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/fit_lme.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mean and confidence intervals using a mixed-effects model — fit_lme","title":"Estimate mean and confidence intervals using a mixed-effects model — fit_lme","text":"Estimates mean standard deviation energetics rates replicates random-effect","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/fit_lme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mean and confidence intervals using a mixed-effects model — fit_lme","text":"","code":"fit_lme(   data_col,   input,   group_colname = \"exp_group\",   rep_colname = \"replicate\" )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/fit_lme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mean and confidence intervals using a mixed-effects model — fit_lme","text":"data_col column name ATP measure (\"ATP_basal_resp\", \"ATP_max_resp\", \"ATP_basal_glyc\", \"ATP_max_glyc\") rate measure (\"OCR\", \"ECAR\") input dataset containing data_col get_energetics read_data group_colname column containing experimental group names rep_colname column containing replicate IDs","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/fit_lme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate mean and confidence intervals using a mixed-effects model — fit_lme","text":"lme4::lmer mixed effects model","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/fit_lme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate mean and confidence intervals using a mixed-effects model — fit_lme","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics <- get_energetics(partitioned_data, ph = 7.4, pka = 6.093, buffer = 0.1) fit_lme(\"ATP_max_glyc\", energetics) #> boundary (singular) fit: see help('isSingular') #> Linear mixed model fit by REML ['lmerMod'] #> Formula: ATP_max_glyc ~ exp_group + (1 | replicate) #>    Data: input #> REML criterion at convergence: 1014.011 #> Random effects: #>  Groups    Name        Std.Dev. #>  replicate (Intercept)  0.00    #>  Residual              71.61    #> Number of obs: 92, groups:  replicate, 2 #> Fixed Effects: #>      (Intercept)  exp_groupGroup_2  exp_groupGroup_3  exp_groupGroup_4   #>            470.7             462.9             371.2             149.0   #> optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"Calculates ATP production glycolysis OXPHOS points defined patitioned_data","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"","code":"get_energetics(partitioned_data, ph, pka, buffer)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"partitioned_data data.table organized Seahorse OCR ECAR rates based timepoints assay cycle. Returned partition_data ph pH value energetics calculation (XF Media, 7.5) pka pKa value energetics calculation (XF Media, 6.063) buffer buffer energetics calculation (XF Media, 0.1 mpH/pmol H+)","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"data.table glycolysis OXPHOS rates","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"TODO: check symbols defined Proton production rate (PPR): $$\\text{PPR} = \\frac{\\text{ECAR value}}{\\text{buffer}}$$ $$   \\text{PPR}_{\\text{mito}} = \\frac{10^{\\text{pH}-\\text{pK}_a}}{1+10^{\\text{pH}-\\text{pK}_a}} \\cdot \\frac{\\text{H}^+}{\\text{O}_2} \\cdot \\text{OCR} $$ calculates proton production glucose conversion bicarbonate \\(\\text{H}^+\\) assuming max \\(\\frac{\\text{H}^+}{\\text{O}_2}\\) 1 $$  \\text{PPR}_\\text{glyc} = \\text{PPR} - \\text{PPR}_\\text{resp} $$ calculates proton production glucose conversion lactate + \\(\\text{H}^+\\) Joules ATP (JATP) production: $$   \\text{ATP}_{\\text{glyc}} =    \\Bigl(\\text{PPR}_\\text{glyc} \\cdot \\frac{\\text{ATP}}{\\text{lactate}}\\Bigl) +    \\Bigl(\\text{MITO}_\\text{resp} \\cdot 2 \\cdot \\frac{\\text{P}}{\\text{O}_\\text{glyc}}\\Bigl) $$ $$  \\frac{\\text{ATP}}{\\text{lactate}} = 1 $$ \\(\\frac{\\text{P}}{{\\text{O}_\\text{glyc}}}\\) = 0.167 glucose (0.242 glycogen). $$  \\text{ATP}_\\text{resp} =   \\Bigl(\\text{coupled MITO}_\\text{resp} \\cdot 2 \\cdot \\frac{\\text{P}}{\\text{O}_\\text{oxphos}}\\Bigl) +   \\Bigl(\\text{MITO}_\\text{resp} \\cdot 2 \\cdot \\frac{\\text{P}}{\\text{O}_\\text{TCA}}\\Bigl) $$ \\(\\frac{\\text{P}}{{\\text{O}_\\text{oxphos}}}\\)  = 2.486 \\(\\frac{\\text{P}}{{\\text{O}_\\text{TCA}}}\\) = 0.167.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics <- get_energetics(   partitioned_data,   ph = 7.4,   pka = 6.093,   buffer = 0.1 ) head(energetics, n = 10) #>     exp_group replicate ATP_basal_resp ATP_max_resp ATP_basal_glyc ATP_max_glyc #>        <fctr>    <fctr>          <num>        <num>          <num>        <num> #>  1:   Group_1         1       1083.877     1125.075      176.42439     524.6518 #>  2:   Group_1         1       1080.106     1117.407      129.69559     442.5421 #>  3:   Group_1         1       1233.324     1278.141      141.43402     472.4431 #>  4:   Group_1         2       1002.058     1042.796       95.13176     390.3254 #>  5:   Group_1         2       1066.278     1107.473       87.08441     420.6239 #>  6:   Group_1         2       1088.996     1127.567      107.80548     485.7402 #>  7:   Group_1         2       1078.165     1114.478      127.14102     469.7935 #>  8:   Group_1         2       1127.103     1172.258      114.74865     477.7720 #>  9:   Group_1         2       1022.219     1058.623      137.66492     504.0603 #> 10:   Group_1         2       1152.477     1195.666      103.91464     426.4569"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"Calculates mean standard deviation ATP production glycolysis OXPHOS points defined partition_data values calculated using get_energetics function via ordinary least squares mixed-effects model","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"","code":"get_energetics_summary(   energetics,   model = \"ols\",   error_metric = \"ci\",   conf_int = 0.95,   sep_reps = FALSE,   ci_method = \"Wald\" )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"energetics data.table Seahorse OCR ECAR rates (get_energetics) model model used estimate mean confidence intervals: ordinary least squares (\"ols\") mixed-effects (\"mixed\") error_metric Whether calculate error standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1 sep_reps Whether calculate summary statistics groups replicates combined. current default FALSE combines replicates, future releases default TRUE providing replicate-specific summaries. ci_method method used compute confidence intervals mixed-effects model: \"Wald\", \"profile\", \"boot\" passed lme4::confint.merMod().","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"list groups data","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"get means confidence intervals experiments replicates, users can either use sep_reps = TRUE get replicate-level summary statistics set model = \"mixed\" use linear mixed-effects model replicate random-effect. confidence intervals generated using confint(method = \"Wald\").","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics_list <- get_energetics(   partitioned_data,   ph = 7.4,   pka = 6.093,   buffer = 0.1 ) energetics_summary <- get_energetics_summary(energetics_list, sep_reps = FALSE) head(energetics_summary[, c(1:5)], n = 10) #> Key: <exp_group> #>    exp_group count ATP_basal_resp.mean ATP_basal_resp.sd ATP_basal_resp.se #>       <fctr> <int>               <num>             <num>             <num> #> 1:   Group_1    22           1100.0468          72.25935         15.405746 #> 2:   Group_2    24           1136.0653          41.34070          8.438635 #> 3:   Group_3    24           1317.1044          52.53006         10.722653 #> 4:   Group_4    22            626.1267          85.60314         18.250651 head(energetics_summary[, c(1, 2, 6, 7)], n = 10) #> Key: <exp_group> #>    exp_group count ATP_basal_resp.lower_bound ATP_basal_resp.higher_bound #>       <fctr> <int>                      <num>                       <num> #> 1:   Group_1    22                  1069.8521                   1130.2415 #> 2:   Group_2    24                  1119.5259                   1152.6047 #> 3:   Group_3    24                  1296.0883                   1338.1204 #> 4:   Group_4    22                   590.3561                    661.8973"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_rate_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Rates summary — get_rate_summary","title":"Rates summary — get_rate_summary","text":"Summarize OCR ECAR mean bounded standard deviations standard error confidence intervals","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_rate_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rates summary — get_rate_summary","text":"","code":"get_rate_summary(   seahorse_rates,   measure = \"OCR\",   assay,   model = \"ols\",   error_metric = \"ci\",   conf_int = 0.95,   sep_reps = FALSE,   ci_method = \"Wald\" )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_rate_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rates summary — get_rate_summary","text":"seahorse_rates data.table Seahorse OCR ECAR rates (imported using read_data function) measure Whether calculate summary \"OCR\" \"ECAR\" assay assay calculate summary (e.g. \"MITO\" \"GLYCO\") model model used estimate mean confidence intervals: error_metric Whether calculate error standard deviations (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1 sep_reps Whether calculate summary statistics groups replicates combined. current default FALSE combines replicates, future releases default TRUE providing replicate-specific summaries. ci_method method used compute confidence intervals mixed-effects model: \"Wald\", \"profile\", \"boot\" passed lme4::confint.merMod().","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_rate_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rates summary — get_rate_summary","text":"data.table means, standard deviations/standard error bounds around mean(sd confidence intervals)","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_rate_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rates summary — get_rate_summary","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) combined_reps <- get_rate_summary(   seahorse_rates,   measure = \"OCR\",   assay = \"MITO\",   model = \"ols\",   error_metric = \"ci\",   conf_int = 0.95,   sep_reps = FALSE ) head(combined_reps, n = 10) #>     exp_group Measurement     mean       sd       se lower_bound upper_bound #>        <char>       <num>    <num>    <num>    <num>       <num>       <num> #>  1:   Group_1           1 307.8917 20.68089 4.409180    299.2498    316.5335 #>  2:   Group_2           1 348.8197 16.65077 3.398824    342.1582    355.4813 #>  3:   Group_3           1 388.7769 19.33691 3.947130    381.0407    396.5131 #>  4:   Group_4           1 226.1002 15.78665 3.365726    219.5035    232.6969 #>  5:   Group_1           2 292.7558 19.41210 4.138674    284.6441    300.8674 #>  6:   Group_2           2 329.9378 12.87193 2.627473    324.7881    335.0876 #>  7:   Group_3           2 369.7873 17.35845 3.543279    362.8426    376.7320 #>  8:   Group_4           2 216.0210 14.42133 3.074639    209.9949    222.0472 #>  9:   Group_1           3 288.0847 18.63144 3.972235    280.2993    295.8702 #> 10:   Group_2           3 324.1226 11.68031 2.384234    319.4496    328.7956  # separate replicates sep_reps <- get_rate_summary(   seahorse_rates,   measure = \"OCR\",   assay = \"MITO\",   model = \"ols\",   error_metric = \"ci\",   conf_int = 0.95,   sep_reps = TRUE ) head(sep_reps, n = 10) #>     exp_group Measurement replicate     mean       sd       se lower_bound #>        <char>       <num>    <fctr>    <num>    <num>    <num>       <num> #>  1:   Group_1           1         1 317.2648 21.57755 6.505875    304.5136 #>  2:   Group_2           1         1 349.2271 17.16613 4.955436    339.5147 #>  3:   Group_3           1         1 399.4677 14.30962 4.130832    391.3714 #>  4:   Group_4           1         1 236.0472 13.21393 3.984150    228.2384 #>  5:   Group_1           2         1 302.3107 20.03568 6.040984    290.4705 #>  6:   Group_2           2         1 330.4760 13.43898 3.879499    322.8723 #>  7:   Group_3           2         1 381.0119 12.00461 3.465432    374.2198 #>  8:   Group_4           2         1 225.7442 11.59172 3.495034    218.8940 #>  9:   Group_1           3         1 296.7702 19.66343 5.928748    285.1501 #> 10:   Group_2           3         1 323.9365 12.40370 3.580640    316.9185 #>     upper_bound #>           <num> #>  1:    330.0161 #>  2:    358.9396 #>  3:    407.5640 #>  4:    243.8560 #>  5:    314.1508 #>  6:    338.0797 #>  7:    387.8041 #>  8:    232.5943 #>  9:    308.3903 #> 10:    330.9544  # mixed effects model reps_as_random_effects <- get_rate_summary(   seahorse_rates,   measure = \"OCR\",   assay = \"MITO\",   model = \"mixed\",   error_metric = \"ci\",   conf_int = 0.95,   sep_reps = FALSE ) #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') head(reps_as_random_effects, n = 10) #>     exp_group Measurement     mean lower_bound upper_bound #>        <char>       <num>    <num>       <num>       <num> #>  1:   Group_1           1 307.8917    291.9667    323.8166 #>  2:   Group_2           1 348.8197    339.2120    358.4275 #>  3:   Group_3           1 388.7769    379.1692    398.3846 #>  4:   Group_4           1 226.1002    216.2859    235.9146 #>  5:   Group_1           2 292.7558    276.8383    308.6732 #>  6:   Group_2           2 329.9378    321.7101    338.1655 #>  7:   Group_3           2 369.7873    361.5596    378.0150 #>  8:   Group_4           2 216.0210    207.6164    224.4257 #>  9:   Group_1           3 288.0847    274.1751    301.9944 #> 10:   Group_2           3 324.1226    316.3846    331.8606"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/make_bioscope_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"Wrapper create 2D plot visualizing mean standard deviation basal maximal ATP production glycolysis OXPHOS experimental group Create Bioenergetic scope plot input Seahorse Wave export, long-form rates excel files","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/make_bioscope_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"","code":"make_bioscope_plot(rep_list, ph, pka, buffer, sheet = 2)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/make_bioscope_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"rep_list list Seahorse Wave excel export files. One file per replicate. Group replicates given experiment single folder, write folder's path \"seahorse_data\". can use `list.files(\"seahorse_data\") \"full.names=TRUE\") get paths files. ph pH value energetics calculation (XF Media, 7.5) pka pKa value energetics calculation (XF Media, 6.063) buffer buffer energetics calculation (XF Media, 0.1 mpH/pmol H+) sheet number excel sheet containing long-form Seahorse data. Default 2 long-form output Seahorse Wave sheet 2","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/make_bioscope_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"ggplot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/make_bioscope_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) make_bioscope_plot(rep_list, ph = 7.4, pka = 6.093, buffer = 0.1) #> Warning: Replicates were combined within groups, but future releases of ceas will calculate energetics without combining them - use `sep_reps = FALSE` to maintain replicate combination."},{"path":"https://jamespeapen.github.io/ceas/dev/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Seahorse data — normalize","title":"Normalize Seahorse data — normalize","text":"Normalizes input data according cell number \\(\\mu\\)g protein. assumes data background normalized.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Seahorse data — normalize","text":"","code":"normalize(   seahorse_rates,   norm_csv,   norm_column = \"well\",   norm_method = \"minimum\" )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Seahorse data — normalize","text":"seahorse_rates seahorse rates table read read_data() function. norm_csv csv file either well experimental groups column 1 cell count \\(\\mu\\)g protein column 2. Headers ignored. norm_column Whether normalize \"well\" \"exp_group\" group. first column normalization csv provided match value. norm_method Whether normalize row norm_column corresponding row norm_csv (\"self\") minimum (\"minimum\") norm_column. See details. first column normalization csv provided match value.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Seahorse data — normalize","text":"normalized seahorse_rates data.table","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/normalize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize Seahorse data — normalize","text":"normalization distinct background normalization done Wave software. data background normalized, read_data() output warning showing rows OCR, ECAR PER values greater 0. norm_method set \"self\", OCR, ECAR, PER value divided \"measure\" column corresponding group. value interpreted pmol/min per cell pmol/min per \\(\\mu\\)g protein. norm_method set \"minimum\", OCR, ECAR, PER value divided minimum measure column provided norm_csv. interpreted pmol/min per minimum group cell count \\(\\mu\\)g protein.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize Seahorse data — normalize","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) norm_csv <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"^norm.csv\", full.names = TRUE) read.csv(norm_csv) #>   exp_group measure #> 1   Group_1   30000 #> 2   Group_2   30000 #> 3   Group_3    5000 #> 4   Group_4    5000 seahorse_rates <- read_data(rep_list, sheet = 2) head(seahorse_rates, n = 10) #>     Measurement   Well     Time      OCR     ECAR      PER  exp_group #>           <num> <char>    <num>    <num>    <num>    <num>     <char> #>  1:           1    A01 1.304765   0.0000  0.00000   0.0000 Background #>  2:           1    A02 1.304765 305.2426 30.64529 334.4771    Group_1 #>  3:           1    A03 1.304765 307.9862 33.27668 358.4754    Group_1 #>  4:           1    A04 1.304765 339.3399 49.17751 503.4910    Group_2 #>  5:           1    A05 1.304765 321.9398 47.94602 492.2597    Group_2 #>  6:           1    A06 1.304765 323.7962 46.84232 482.1940    Group_2 #>  7:           1    A07 1.304765 379.1455 46.81741 481.9668    Group_3 #>  8:           1    A08 1.304765 391.1478 50.14648 512.3280    Group_3 #>  9:           1    A09 1.304765 393.4523 52.54649 534.2160    Group_3 #> 10:           1    A10 1.304765 217.0543 29.11793 320.5476    Group_4 #>     assay_type replicate #>         <char>    <fctr> #>  1:       <NA>         1 #>  2:       MITO         1 #>  3:       MITO         1 #>  4:       MITO         1 #>  5:       MITO         1 #>  6:       MITO         1 #>  7:       MITO         1 #>  8:       MITO         1 #>  9:       MITO         1 #> 10:       MITO         1 # normalize by experimental group based on the minimum cell count or protein quantity seahorse_rates.normalized <- normalize(   seahorse_rates,   norm_csv,   norm_column = \"exp_group\",   norm_method = \"minimum\" ) head(seahorse_rates.normalized, n = 10) #>     Measurement   Well     Time       OCR      ECAR       PER  exp_group #>           <num> <char>    <num>     <num>     <num>     <num>     <char> #>  1:           1    A01 1.304765   0.00000  0.000000   0.00000 Background #>  2:           1    A02 1.304765  50.87376  5.107549  55.74619    Group_1 #>  3:           1    A03 1.304765  51.33103  5.546114  59.74590    Group_1 #>  4:           1    A04 1.304765  56.55665  8.196252  83.91516    Group_2 #>  5:           1    A05 1.304765  53.65663  7.991003  82.04329    Group_2 #>  6:           1    A06 1.304765  53.96603  7.807053  80.36566    Group_2 #>  7:           1    A07 1.304765 379.14553 46.817412 481.96685    Group_3 #>  8:           1    A08 1.304765 391.14776 50.146484 512.32798    Group_3 #>  9:           1    A09 1.304765 393.45230 52.546486 534.21600    Group_3 #> 10:           1    A10 1.304765 217.05432 29.117934 320.54760    Group_4 #>     assay_type replicate #>         <char>    <fctr> #>  1:       <NA>         1 #>  2:       MITO         1 #>  3:       MITO         1 #>  4:       MITO         1 #>  5:       MITO         1 #>  6:       MITO         1 #>  7:       MITO         1 #>  8:       MITO         1 #>  9:       MITO         1 #> 10:       MITO         1"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/partition_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Organize Seahorse Data — partition_data","title":"Organize Seahorse Data — partition_data","text":"Organizes Seahorse OCR ECAR rates based defined time points (.e. Measurement column) experiment. time point can specified modifying Mito Glyco Stress Test (.e. 3 measurements per cycle X measurements)","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/partition_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organize Seahorse Data — partition_data","text":"","code":"partition_data(   seahorse_rates,   assay_types = list(basal = \"MITO\", uncoupled = \"MITO\", maxresp = \"MITO\", nonmito =     \"MITO\", no_glucose_glyc = \"GLYCO\", glucose_glyc = \"GLYCO\", max_glyc = \"GLYCO\"),   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc_tp = 3,   glucose_glyc_tp = 6,   max_glyc_tp = 8 )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/partition_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organize Seahorse Data — partition_data","text":"seahorse_rates data.table OCR ECAR rates returned read_data assay_types list configures data partitioning based type assay. See details. basal_tp Basal respiration time point. Must less uncoupled_tp uncoupled_tp ATP-coupled respiration time point. Must less maxresp_tp maxresp_tp Maximal uncoupled respiration time point. Must less nonmito_tp nonmito_tp Non-mitochondrial respiration time point. Must larger maxresp_tp no_glucose_glyc_tp glucose added acidification time point. Must less glucose_glyc_tp glucose_glyc_tp Glucose-associated acidification time point. Must less max_glyc_tp max_glyc_tp Maximal acidification time point. Must less twodg_glyc_tp","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/partition_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organize Seahorse Data — partition_data","text":"list named time points assay cycle","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/partition_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Organize Seahorse Data — partition_data","text":"Note: use term 'max' package documentation mean maximal experimental OCR ECAR values rather absolute biological maximums. partition_data sets rates data ATP calculations get_energetics function. , takes list assay_types named values basal, uncoupled, maxresp, nonmito, no_glucose_glyc, glucose_glyc, max_glyc. default setting, configured experiment Mito Glyco assays. However, partitioning can configured experimental conditions. MITO data: Respiratory control ratio (RCR) glycolytic capacity (GC) assay: Data according Mookerjee et al. 2017 J Biol Chem;292:7189-207. Also see vignette.","code":"partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"MITO\",     uncoupled = \"MITO\",     maxresp = \"MITO\",     nonmito = \"MITO\",     no_glucose_glyc = NA,     glucose_glyc = \"MITO\",     max_glyc = NA   ),   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc_tp = NA,   glucose_glyc_tp = 3,   max_glyc_tp = NA ) partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"RCR\",     uncoupled = \"RCR\",     maxresp = \"RCR,\"     nonmito = \"RCR\",     no_glucose_glyc = NA,     glucose_glyc = \"GC\",     max_glyc = \"GC\"   ),   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc = NA,   glucose_glyc_tp = 3,   max_glyc_tp = 9 ) partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"RefAssay\",     uncoupled = \"RefAssay\",     maxresp = NA,     nonmito = \"RefAssay\",     no_glucose_glyc = \"RefAssay\",     glucose_glyc = \"RefAssay\",     max_glyc = NA   ),   basal_tp = 5,   uncoupled_tp = 10,   nonmito_tp = 12,   maxresp = NA,   no_glucose_glyc_tp = 1,   glucose_glyc_tp = 5,   max_glyc = NA )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/partition_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Organize Seahorse Data — partition_data","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rate_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Rate plot — rate_plot","title":"Rate plot — rate_plot","text":"Generate OCR ECAR plots","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rate_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rate plot — rate_plot","text":"","code":"rate_plot(   seahorse_rates,   measure = \"OCR\",   assay = \"MITO\",   model = \"ols\",   error_bar = \"ci\",   conf_int = 0.95,   group_label = \"Experimental group\",   linewidth = 2,   sep_reps = FALSE,   ci_method = \"Wald\" )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rate_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rate plot — rate_plot","text":"seahorse_rates data.table Seahorse OCR ECAR rates (imported using read_data function) measure Whether plot \"OCR\" \"ECAR\" assay assay plot (e.g. \"MITO\" \"GLYCO\") model model used estimate mean confidence intervals: error_bar Whether plot error bars standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1 group_label Label experimental group populate legend title linewidth Width lines, passed geom_line() sep_reps Whether calculate summary statistics groups replicates combined. current default FALSE combines replicates, future releases default TRUE providing replicate-specific summaries. ci_method method used compute confidence intervals mixed-effects model: \"Wald\", \"profile\", \"boot\" passed lme4::confint.merMod().","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rate_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rate plot — rate_plot","text":"ggplot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rate_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rate plot — rate_plot","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) rate_plot(   seahorse_rates,   measure = \"OCR\",   error_bar = \"ci\",   conf_int = 0.95,   sep_reps = FALSE )  rate_plot(   seahorse_rates,   measure = \"OCR\",   error_bar = \"ci\",   conf_int = 0.95,   sep_reps = TRUE )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rates_lme_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mean and confidence intervals for ATP measures using a mixed-effects model — rates_lme_summary","title":"Estimate mean and confidence intervals for ATP measures using a mixed-effects model — rates_lme_summary","text":"Estimates mean standard deviation ATP production glycolysis OXPHOS points defined partition_data values calculated using get_energetics function","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rates_lme_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mean and confidence intervals for ATP measures using a mixed-effects model — rates_lme_summary","text":"","code":"rates_lme_summary(measure, assay, rates, conf_int, ci_method)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rates_lme_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mean and confidence intervals for ATP measures using a mixed-effects model — rates_lme_summary","text":"measure Whether plot \"OCR\" \"ECAR\" assay assay plot (e.g. \"MITO\" \"GLYCO\") rates data.table Seahorse OCR ECAR rates (get_energetics) conf_int confidence interval percentage. 0 1 ci_method method used compute confidence intervals mixed-effects model: \"Wald\", \"profile\", \"boot\" passed lme4::confint.merMod().","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rates_lme_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate mean and confidence intervals for ATP measures using a mixed-effects model — rates_lme_summary","text":"list groups data","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rates_lme_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate mean and confidence intervals for ATP measures using a mixed-effects model — rates_lme_summary","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) rates_lme_summary(   measure = \"OCR\",   assay = \"MITO\",   rates = seahorse_rates,   conf_int = 0.95,   ci_method = \"Wald\" ) #> boundary (singular) fit: see help('isSingular') #> boundary (singular) fit: see help('isSingular') #>     exp_group Measurement      mean lower_bound upper_bound #>        <char>       <num>     <num>       <num>       <num> #>  1:   Group_1           1 307.89166   291.96673   323.81660 #>  2:   Group_2           1 348.81974   339.21203   358.42746 #>  3:   Group_3           1 388.77691   379.16919   398.38462 #>  4:   Group_4           1 226.10023   216.28587   235.91458 #>  5:   Group_1           2 292.75576   276.83832   308.67320 #>  6:   Group_2           2 329.93782   321.71013   338.16550 #>  7:   Group_3           2 369.78727   361.55959   378.01496 #>  8:   Group_4           2 216.02105   207.61640   224.42569 #>  9:   Group_1           3 288.08473   274.17510   301.99437 #> 10:   Group_2           3 324.12258   316.38460   331.86056 #> 11:   Group_3           3 363.67394   355.93596   371.41192 #> 12:   Group_4           3 213.01895   205.11454   220.92336 #> 13:   Group_1           4 101.19365    91.72564   110.66166 #> 14:   Group_2           4 117.85782   113.52722   122.18843 #> 15:   Group_3           4 136.45736   132.12675   140.78796 #> 16:   Group_4           4  83.47057    79.04682    87.89431 #> 17:   Group_1           5  97.45195    88.44895   106.45496 #> 18:   Group_2           5 119.40534   114.82492   123.98576 #> 19:   Group_3           5 132.45771   127.87729   137.03813 #> 20:   Group_4           5  88.50989    83.83096    93.18882 #> 21:   Group_1           6  97.55136    87.45242   107.65030 #> 22:   Group_2           6 128.25149   122.51076   133.99222 #> 23:   Group_3           6 136.23777   130.49704   141.97850 #> 24:   Group_4           6 106.28409   100.41989   112.14829 #> 25:   Group_1           7 443.41553   418.06763   468.76342 #> 26:   Group_2           7 572.60816   540.62823   604.58810 #> 27:   Group_3           7 554.05711   522.07717   586.03704 #> 28:   Group_4           7 214.31752   181.64977   246.98528 #> 29:   Group_1           8 457.96943   438.71539   477.22347 #> 30:   Group_2           8 563.15354   536.49754   589.80955 #> 31:   Group_3           8 502.38164   475.72563   529.03765 #> 32:   Group_4           8 190.92705   163.69773   218.15637 #> 33:   Group_1           9 481.07496   461.12582   501.02411 #> 34:   Group_2           9 557.32512   529.70678   584.94346 #> 35:   Group_3           9 474.22872   446.61038   501.84706 #> 36:   Group_4           9 180.99782   152.78547   209.21017 #> 37:   Group_1          10  53.26419    47.68983    58.83855 #> 38:   Group_2          10  60.79879    57.54308    64.05449 #> 39:   Group_3          10  70.38167    67.12596    73.63738 #> 40:   Group_4          10  46.19680    42.87107    49.52253 #> 41:   Group_1          11  54.98763    50.31468    59.66057 #> 42:   Group_2          11  62.88026    60.26676    65.49376 #> 43:   Group_3          11  69.75906    67.14555    72.37256 #> 44:   Group_4          11  43.25444    40.58473    45.92416 #> 45:   Group_1          12  53.66469    49.25649    58.07289 #> 46:   Group_2          12  61.64285    59.07303    64.21268 #> 47:   Group_3          12  67.32687    64.75705    69.89670 #> 48:   Group_4          12  40.82449    38.19939    43.44959 #>     exp_group Measurement      mean lower_bound upper_bound"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Seahorse Wave Excel File — read_data","title":"Read Seahorse Wave Excel File — read_data","text":"Reads input seahore data excel Seahorse Wave File.  assumes data background normalized.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Seahorse Wave Excel File — read_data","text":"","code":"read_data(   rep_list,   norm = NULL,   sheet = 2,   delimiter = \" \",   norm_column = \"exp_group\",   norm_method = \"minimum\" )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Seahorse Wave Excel File — read_data","text":"rep_list list Seahorse Wave excel export files. One file per replicate. data directory called \"seahorse_data\", use list.files(\"seahorse_data\", pattern = \"*.xlsx\", full.names = TRUE) make list excel files. Add multiple replicates care - see details. norm csv file experimental groups normalization values. Leave unset normalization required. See normalize(). sheet number excel sheet containing long-form Seahorse data. Default 2 long-form output Seahorse Wave sheet 2 delimiter delimiter group name assay type Group column wave output. e.g. \"Group1 MITO\" use space character delimiter. norm_column Whether normalize \"Well\" \"exp_group\" column. first column normalization csv provided match value. norm_method Whether normalize row norm_column corresponding row norm_csv (\"self\") minimum (\"minimum\") norm_column. See normalize() function details.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Seahorse Wave Excel File — read_data","text":"seahorse_rates table","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/read_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Seahorse Wave Excel File — read_data","text":"Although ceas enables integration multiple biological /technical replicates, previous work reported high inter-plate variation (Yepez et. al 2018). want replicate data combined, can either: make sure names common groups replicates different. downstream analyses (get_energetics_summary, bioscope_plot, rate_plot, atp_plot), use sep_reps = TRUE calculations plotting separately replicate. NOTE: maintain backwards compatibility sep_reps currently FALSE default, set TRUE future release.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/read_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read Seahorse Wave Excel File — read_data","text":"Yépez et al. 2018 OCR-Stats: Robust estimation statistical testing mitochondrial respiration activities using Seahorse XF Analyzer PLOS ONE 2018;13:e0199938. doi:10.1371/journal.pone.0199938","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Seahorse Wave Excel File — read_data","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) head(seahorse_rates, n = 10) #>     Measurement   Well     Time      OCR     ECAR      PER  exp_group #>           <num> <char>    <num>    <num>    <num>    <num>     <char> #>  1:           1    A01 1.304765   0.0000  0.00000   0.0000 Background #>  2:           1    A02 1.304765 305.2426 30.64529 334.4771    Group_1 #>  3:           1    A03 1.304765 307.9862 33.27668 358.4754    Group_1 #>  4:           1    A04 1.304765 339.3399 49.17751 503.4910    Group_2 #>  5:           1    A05 1.304765 321.9398 47.94602 492.2597    Group_2 #>  6:           1    A06 1.304765 323.7962 46.84232 482.1940    Group_2 #>  7:           1    A07 1.304765 379.1455 46.81741 481.9668    Group_3 #>  8:           1    A08 1.304765 391.1478 50.14648 512.3280    Group_3 #>  9:           1    A09 1.304765 393.4523 52.54649 534.2160    Group_3 #> 10:           1    A10 1.304765 217.0543 29.11793 320.5476    Group_4 #>     assay_type replicate #>         <char>    <fctr> #>  1:       <NA>         1 #>  2:       MITO         1 #>  3:       MITO         1 #>  4:       MITO         1 #>  5:       MITO         1 #>  6:       MITO         1 #>  7:       MITO         1 #>  8:       MITO         1 #>  9:       MITO         1 #> 10:       MITO         1  # normalization by well using raw cell count or protein quantity norm_csv <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"well_norm.csv\", full.names = TRUE) seahorse_rates.norm <- read_data(   rep_list,   norm = norm_csv,   norm_column = \"well\",   norm_method = \"self\",   sheet = 2 ) head(seahorse_rates.norm, n = 10) #>     Measurement   Well     Time        OCR        ECAR        PER  exp_group #>           <num> <char>    <num>      <num>       <num>      <num>     <char> #>  1:           1    A01 1.304765 0.00000000 0.000000000 0.00000000 Background #>  2:           1    A02 1.304765 0.06104851 0.006129059 0.06689542    Group_1 #>  3:           1    A03 1.304765 0.05599749 0.006050306 0.06517735    Group_1 #>  4:           1    A04 1.304765 0.06402640 0.009278776 0.09499830    Group_2 #>  5:           1    A05 1.304765 0.07154218 0.010654670 0.10939105    Group_2 #>  6:           1    A06 1.304765 0.05488070 0.007939376 0.08172779    Group_2 #>  7:           1    A07 1.304765 0.08425456 0.010403869 0.10710374    Group_3 #>  8:           1    A08 1.304765 0.06984781 0.008954729 0.09148714    Group_3 #>  9:           1    A09 1.304765 0.06668683 0.008906184 0.09054508    Group_3 #> 10:           1    A10 1.304765 0.04095365 0.005493950 0.06048068    Group_4 #>     assay_type replicate #>         <char>    <fctr> #>  1:       <NA>         1 #>  2:       MITO         1 #>  3:       MITO         1 #>  4:       MITO         1 #>  5:       MITO         1 #>  6:       MITO         1 #>  7:       MITO         1 #>  8:       MITO         1 #>  9:       MITO         1 #> 10:       MITO         1"},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-130","dir":"Changelog","previous_headings":"","what":"ceas 1.3.0","title":"ceas 1.3.0","text":"normalize() can now normalize well (norm_column = \"well\") alternative existing normalization experimental group (norm_column = \"exp_group\") normalize() two normalization methods. norm_method = \"self\": based corresponding well experimental group row measure column input normalization CSV. Given input normalization data , normalizing experimental group divide experimental group rows seahorse table corresponding measure value experimental group input CSV. Similarly, normalizing well, set well rows normalized corresponding measure value well - input normalization CSV must column well instead exp_group every well Seahorse data. based minimum measure column input normalization data (norm_method = \"minimum\") (). normalization constant calculated dividing well experimental group measure minimum measure. normalizing experimental group, row seahorse table divide group’s normalization constant. Similarly, normalizing well, well row divided well’s normalization constant. Note: current default normalize experimental group using minimum (norm_column = \"exp_group\", norm_method = \"minimum\") maintain backwards compatibility, future releases normalize well using corresponding row (norm_column = \"well\", norm_method = \"self\").","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-121","dir":"Changelog","previous_headings":"","what":"ceas 1.2.1","title":"ceas 1.2.1","text":"read_data() throws error “Group” column input data one word separated delimiter provided user.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-120","dir":"Changelog","previous_headings":"","what":"ceas 1.2.0","title":"ceas 1.2.0","text":"Linear mixed-effects models can now used get mean confidence intervals datasets replicates. ATP production, OCR ECAR modelled response experimental group fixed effect replicate random effect. Mixed-effects modelling supported get_energetics_summary(), get_rate_summary(), bioscope_plot(), atp_plot(), rate_plot().","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-112","dir":"Changelog","previous_headings":"","what":"ceas 1.1.2","title":"ceas 1.1.2","text":"get_energetics() now warns possible mismatches replicates MITO GLYCO groups instead stopping datasets different replicate counts can cause mismatch may erroneous.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-111","dir":"Changelog","previous_headings":"","what":"ceas 1.1.1","title":"ceas 1.1.1","text":"rate_plot() now linewidth parameter set width geom_lines","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-110","dir":"Changelog","previous_headings":"","what":"ceas 1.1.0","title":"ceas 1.1.0","text":"Separating replicates now supported getting get_energetics_summary(), bioscope_plot(), atp_plot() rate_plot() sep_reps = TRUE. calculate summary statistics replicate within group instead combining . atp_plot() now uses linerange plot instead crossbar plot color distinguish replicates instead experimental groups. color replicates combined. Note: current default combine replicates (sep_reps = FALSE) maintain backwards compatibility, future releases separate default. sep_reps explicitly set FALSE, functions warn user future change defaults.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-103","dir":"Changelog","previous_headings":"","what":"ceas 1.0.3","title":"ceas 1.0.3","text":"Preserve replicate column returning energetics get_energetics()","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-102","dir":"Changelog","previous_headings":"","what":"ceas 1.0.2","title":"ceas 1.0.2","text":"read_data() returns replicate column factor instead numeric","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-101","dir":"Changelog","previous_headings":"","what":"ceas 1.0.1","title":"ceas 1.0.1","text":"Replace geom_line’s deprecated size option linewidth rate_plot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-100","dir":"Changelog","previous_headings":"","what":"ceas 1.0.0","title":"ceas 1.0.0","text":"CRAN release: 2024-05-07 First CRAN release.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-033","dir":"Changelog","previous_headings":"","what":"ceas 0.3.3","title":"ceas 0.3.3","text":"Don’t divide 0 normalizing already 0; PER now normalized OCR ECAR.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-032","dir":"Changelog","previous_headings":"","what":"ceas 0.3.2","title":"ceas 0.3.2","text":"Warn data normalized checking “Background” group’s OCR, ECAR, PER values 0.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-031","dir":"Changelog","previous_headings":"","what":"ceas 0.3.1","title":"ceas 0.3.1","text":"Add assay type argument plot ECAR/OCR meaningfully assay types previously summarized instead just one.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-030","dir":"Changelog","previous_headings":"","what":"ceas 0.3.0","title":"ceas 0.3.0","text":"Add normalize(), cell count/protein mass normalization function. read_data now can take csv file cell counts protein mass (\\(\\mu\\)g) experimental groups normalize data. example csv provided dataset 4 experimental groups:","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-020","dir":"Changelog","previous_headings":"","what":"ceas 0.2.0","title":"ceas 0.2.0","text":"Add delimiter group assay labels argument read_data() support delimiters .","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-011","dir":"Changelog","previous_headings":"","what":"ceas 0.1.1","title":"ceas 0.1.1","text":"Fix calculation coupled mitochondrial respiration (#4). correction published https://doi.org/10.1074/jbc.AAC118.004855.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-010","dir":"Changelog","previous_headings":"","what":"ceas 0.1.0","title":"ceas 0.1.0","text":"First release initial submission publication.","code":""}]

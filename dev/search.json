[{"path":"https://jamespeapen.github.io/ceas/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ceas authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Getting started with CEAS","text":"","code":"library(ceas)"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"importing-seahorse-rates-data","dir":"Articles","previous_headings":"","what":"Importing Seahorse rates data","title":"Getting started with CEAS","text":"read_data function takes list Excel files. easy way get list put data directory list contents. use package’s internal datasets, list.files take directory name first argument. data requires following columns: Measurement, Well, Group, Time, OCR, ECAR, PER. Group column needs format biological_group<space>Assay_type shown . Upon reading read_data, Group column split two group assay columns space. output format can set Seahorse machine starting experiment. already data, column converted format work ceas.","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) raw_data <- readxl::read_excel(rep_list[1], sheet = 2) knitr::kable(head(raw_data)) seahorse_rates <- read_data(rep_list) knitr::kable(head(seahorse_rates))"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"normalization","dir":"Articles","previous_headings":"Importing Seahorse rates data","what":"Normalization","title":"Getting started with CEAS","text":"two types normalization involved Seahorse data analysis. One background normalization done Wave software. ceas produce warning finds “Background” data 0 (see first row table ). biological normalization based cell count mass protein. data already biologically normalized, need csv file containing experimental groups cell counts \\(\\mu\\)g protein format: csv file’s full path may passed read_data() using norm argument.","code":"norm_csv <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"norm.csv\", full.names = TRUE) read.csv(norm_csv) |> knitr::kable() read_data(rep_list, norm = norm_csv) |> head() |> knitr::kable()"},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"partitioning-data","dir":"Articles","previous_headings":"Calculating energetics","what":"Partitioning data","title":"Getting started with CEAS","text":"Note: use term ‘max’ package documentation mean maximal experimental OCR ECAR values rather absolute biological maximums. energetics calculation workflow involves partitioning data time point assay intervals.","code":"partitioned_data <- partition_data(seahorse_rates)"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"alternative-data-formats","dir":"Articles","previous_headings":"Calculating energetics > Partitioning data","what":"Alternative data formats","title":"Getting started with CEAS","text":"default options set experiment mitochondrial glycolysis assay, mitochondrial assay glycolysis assay, assay_types list parameter can modified account . Mito + Glyco (default) Data form Mookerjee et al. (2017) Just Mito Respiratory control ratio (RCR) glycolytic capacity (GC) assay","code":"partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"MITO\",     uncoupled = \"MITO\",     maxresp = \"MITO\",     nonmito = \"MITO\",     no_glucose_glyc = \"GLYCO\",     glucose_glyc = \"GLYCO\",     max_glyc = \"GLYCO\"   ),   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc_tp = 3,   glucose_glyc_tp = 6,   max_glyc_tp = 8 ) partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"RefAssay\",     uncoupled = \"RefAssay\",     maxresp = NA,     nonmito = \"RefAssay\",     no_glucose_glyc = \"RefAssay\",     glucose_glyc = \"RefAssay\",     max_glyc = NA   ),   basal_tp = 5,   uncoupled_tp = 10,   nonmito_tp = 12,   maxresp = NA,   no_glucose_glyc_tp = 1,   glucose_glyc_tp = 5,   max_glyc = NA ) partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"MITO\",     uncoupled = \"MITO\",     maxresp = \"MITO\",     nonmito = \"MITO\",     no_glucose_glyc = NA,     glucose_glyc = \"MITO\",     max_glyc = NA   ),   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc_tp = NA,   glucose_glyc_tp = 3,   max_glyc_tp = NA ) partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"RCR\",     uncoupled = \"RCR\",     maxresp = \"RCR,\"     nonmito = \"RCR\",     no_glucose_glyc = NA,     glucose_glyc = \"GC\",     max_glyc = \"GC\"   ),   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc = NA,   glucose_glyc_tp = 3,   max_glyc_tp = 9 )"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"section","dir":"Articles","previous_headings":"","what":"Getting started with CEAS","title":"Getting started with CEAS","text":"Note time point parameters (maxresp_tp no_glucose_glyc_tp) also need changed accordingly. get_energetics function requires pH, pK\\(_a\\) buffer values. information calculations see article ATP calculations.","code":"energetics <- get_energetics(partitioned_data, ph = 7.4, pka = 6.093, buffer = 0.10)"},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"bioenergetic-scope-plot","dir":"Articles","previous_headings":"Plotting","what":"Bioenergetic scope plot","title":"Getting started with CEAS","text":"bioscope_plot function plots 2D representation group “bioenergetic scope.” Bioenergetic scope describes theoretical energetic space matrix operates. bioenergetic scope coordinates JATP OXPHOS y-axis JATP glycolysis x-axis. points represent mean basal /max JATP OXPHOS glycolysis vertical horizontal lines represent standard deviation confidence interval JATP OXPHOS glycolysis, respectively.","code":"(bioscope <- bioscope_plot(energetics))"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"rate-plots","dir":"Articles","previous_headings":"Plotting","what":"Rate plots","title":"Getting started with CEAS","text":"rate_plot function provides overview OCR ECAR assay type time, enables cross-group energetic comparisons addition energetic-modulating compounds. rate_plot line represents mean group OCR ECAR sequential measurements (x-axis) shaded variance region represents standard deviation specified confidence interval. Oxygen consumption rate (OCR) Extracellular Acidification Rate (ECAR)","code":"(ocr <- rate_plot(seahorse_rates, measure = \"OCR\", assay = \"MITO\")) (ecar <- rate_plot(seahorse_rates, measure = \"ECAR\", assay = \"GLYCO\"))"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"atp-plots","dir":"Articles","previous_headings":"Plotting","what":"ATP plots","title":"Getting started with CEAS","text":"atp_plot function plots group JATP values, enables cross-group OXPHOS glycolytic JATP comparisons basal max conditions. atp_plot symbols represent mean basal max JATP OXPHOS glycolysis, crossbar boundaries represent standard deviation confidence interval JATP variance. Basal glycolysis Basal respiration Maximal glycolysis Maximal respiration","code":"(basal_glyc <- atp_plot(energetics, basal_vs_max = \"basal\", glyc_vs_resp = \"glyc\")) (basal_resp <- atp_plot(energetics, basal_vs_max = \"basal\", glyc_vs_resp = \"resp\")) (max_glyc <- atp_plot(energetics, basal_vs_max = \"max\", glyc_vs_resp = \"glyc\")) (max_resp <- atp_plot(energetics, basal_vs_max = \"max\", glyc_vs_resp = \"resp\"))"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"customizing-plots","dir":"Articles","previous_headings":"Plotting","what":"Customizing plots","title":"Getting started with CEAS","text":"CEAS designed work existing ggplot2 customization functionality doesn’t include shape size options plots. example, change colors used plot, simply make plot add custom colors ’d like:","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"colors","dir":"Articles","previous_headings":"Plotting > Customizing plots","what":"Colors","title":"Getting started with CEAS","text":"","code":"custom_colors <- c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\") bioscope + ggplot2::scale_color_manual(   values = custom_colors ) ocr + ggplot2::scale_color_manual(   values = custom_colors )"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"labels","dir":"Articles","previous_headings":"Plotting > Customizing plots","what":"Labels","title":"Getting started with CEAS","text":"Change axis labels Change label size","code":"ecar +     ggplot2::labs(x = \"Time points\") basal_glyc +     ggplot2::theme(axis.text = ggplot2::element_text(size = 20))"},{"path":"https://jamespeapen.github.io/ceas/dev/articles/ceas.html","id":"editing-functions","dir":"Articles","previous_headings":"Plotting > Customizing plots","what":"Editing functions","title":"Getting started with CEAS","text":"working making plots customizable possible. However, options set calls plotting functions ggplot2 functions, can get code used make plots running function name without parenthesis modify . , since every step ceas workflow provides dataset, can run modified function custom plotting functions datasets. RStudio, can run utils::edit modify function.","code":"rate_plot function (seahorse_rates, measure = \"OCR\", assay = \"MITO\", error_bar = \"ci\",      conf_int = 0.95, group_label = \"Experimental group\")  {     stopifnot(`'measure' should be 'OCR' or 'ECAR'` = measure %in%          c(\"OCR\", \"ECAR\"))     stopifnot(`'error_bar' should be 'sd' or 'ci'` = error_bar %in%          c(\"sd\", \"ci\"))     stopifnot(`'conf_int' should be between 0 and 1` = conf_int >          0 && conf_int < 1)     data_cols <- c(\"Measurement\", \"Well\", \"OCR\", \"ECAR\", \"PER\",          \"exp_group\", \"assay_type\", \"replicate\")     missing_cols <- setdiff(data_cols, colnames(seahorse_rates))     if (length(missing_cols) != 0) {         stop(paste0(\"'\", missing_cols, \"'\", \" column was not found in input data\\n\"))     }     Measurement <- NULL     exp_group <- NULL     lower_bound <- NULL     upper_bound <- NULL     plot_data <- get_rate_summary(seahorse_rates, measure, assay,          error_bar, conf_int)     y_labels <- list(OCR = paste0(assay, \" OCR (pmol/min)\"),          ECAR = paste0(assay, \" ECAR (mpH/min)\"))     ggplot(plot_data, aes(x = Measurement, y = mean, color = exp_group,          group = exp_group, fill = exp_group)) + geom_line(size = 2) +          geom_ribbon(aes(ymin = lower_bound, ymax = upper_bound),              alpha = 0.2, color = NA) + scale_x_continuous(breaks = seq(1,          12, by = 1)) + xlab(\"Measurement\") + ylab(y_labels[measure]) +          labs(color = group_label, fill = group_label) + theme_bw() } edit(rate_plot)"},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rachel House. Author, maintainer. James Eapen. Author. Hui Shen. Funder. Carrie Graveel. Funder. Matthew Steensma. Funder.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"House R, Eapen J (2024). ceas: Cellular Energetics Analysis Software. R package version 0.3.3.9000, https://github.com/jamespeapen/ceas/, https://jamespeapen.github.io/ceas/.","code":"@Manual{,   title = {ceas: Cellular Energetics Analysis Software},   author = {Rachel House and James Eapen},   year = {2024},   note = {R package version 0.3.3.9000, https://github.com/jamespeapen/ceas/},   url = {https://jamespeapen.github.io/ceas/}, }"},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"ceas-","dir":"","previous_headings":"","what":"Cellular Energetics Analysis Software","title":"Cellular Energetics Analysis Software","text":"Cellular Energetics Analysis Software","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Cellular Energetics Analysis Software","text":"Analysis visualization cellular energetics data Agilent Seahorse XF96. Cellular energetics cells make, use, distribute units energy (primarily ATP). Measuring real-time cellular energetics essential understanding tissue cell’s bioenergetic state fuel dependencies. Seahorse machine measures cell’s matrix’s oxygen consumption rate (OCR) – proxy oxidative phosphorylation – extracellular acidification rate – proxy glycolysis. package offers flexible fast analysis plotting capabilities data.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"pronounciation","dir":"","previous_headings":"Description","what":"Pronounciation","title":"Cellular Energetics Analysis Software","text":"‘ceas’ pronounced like word ‘seas’ (siːz, SEEZ).","code":""},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"github","dir":"","previous_headings":"Installation","what":"Github","title":"Cellular Energetics Analysis Software","text":"can install Github cloning repo running can also use R devtools package:","code":"git clone https://github.com/jamespeapen/ceas/ R CMD INSTALL ceas devtools::install_github(\"jamespeapen/ceas\")"},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Cellular Energetics Analysis Software","text":"user guide available package website. Bug reports may submitted GitHub issues.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Cellular Energetics Analysis Software","text":"Submit patches using GitHub pull requests sending patch file james.eapen@vai.org. follow tidyverse style guide using styler lintr.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/atp_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"ATP Plot — atp_plot","title":"ATP Plot — atp_plot","text":"Generate ATP Plot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/atp_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ATP Plot — atp_plot","text":"","code":"atp_plot(   energetics,   error_bar = \"ci\",   conf_int = 0.95,   size = 2,   shape = 21,   basal_vs_max = \"basal\",   glyc_vs_resp = \"glyc\",   group_label = \"Experimental group\" )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/atp_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ATP Plot — atp_plot","text":"energetics table calculated glycolysis OXPHOS rates. Returned get_energetics error_bar Whether plot error bars standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1 size Size points shape Shape points basal_vs_max Whether plot \"basal\" \"max\" respiration glyc_vs_resp Whether plot glycolysis (\"glyc\")  respiration (\"resp\") group_label Label experimental group populate legend title","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/atp_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ATP Plot — atp_plot","text":"ggplot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/atp_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ATP Plot — atp_plot","text":"Note: use term 'max' package documentation mean maximal experimental OCR ECAR values rather absolute biological maximums.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/atp_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ATP Plot — atp_plot","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics <- get_energetics(partitioned_data, ph = 7.4, pka = 6.093, buffer = 0.1) atp_plot(energetics)   atp_plot(energetics, basal_vs_max = \"max\")   atp_plot(energetics, basal_vs_max = \"basal\", glyc_vs_resp = \"resp\")   # to change fill, the geom_point shape number should be between 15 and 25 atp_plot(energetics, shape = 21) + # filled circle   ggplot2::scale_fill_manual(values = c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\"))   # to change color, use ggplot2::scale_color_manual atp_plot(energetics) +   ggplot2::scale_color_manual(values = c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\"))"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/bioscope_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bioenergetic Scope Plot — bioscope_plot","title":"Bioenergetic Scope Plot — bioscope_plot","text":"Generate Bioenergetic Scope Plot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/bioscope_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bioenergetic Scope Plot — bioscope_plot","text":"","code":"bioscope_plot(   energetics,   error_bar = \"ci\",   conf_int = 0.95,   size = 2,   basal_shape = 1,   max_shape = 19,   group_label = \"Experimental Group\" )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/bioscope_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bioenergetic Scope Plot — bioscope_plot","text":"energetics table calculated glycolysis OXPHOS rates. Returned get_energetics error_bar Whether plot error bars standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1 size Size points basal_shape Shape points basal values max_shape Shape points max values group_label Label experimental group populate legend title bioscope_plot Creates 2D plot visualizing mean standard deviation basal maximal ATP production glycolysis OXPHOS experimental group","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/bioscope_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bioenergetic Scope Plot — bioscope_plot","text":"ggplot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/bioscope_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bioenergetic Scope Plot — bioscope_plot","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics <- get_energetics(   partitioned_data,   ph = 7.4,   pka = 6.093,   buffer = 0.1 ) bioscope_plot(energetics)   # to change fill, the geom_point shape should be between 15 and 20. # These shapes are filled without border and will correctly show on the legend. bioscope_plot(energetics, size = 3, basal_shape = 2, max_shape = 17) + # empty and filled triangle   ggplot2::scale_fill_manual(     values = c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\")   )   # to change color, use ggplot2::scale_color_manual bioscope_plot(energetics) +   ggplot2::scale_color_manual(     values = c(\"#e36500\", \"#b52356\", \"#3cb62d\", \"#328fe1\")   )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/ceas-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ceas: Cellular Energetics Analysis Software — ceas-package","title":"ceas: Cellular Energetics Analysis Software — ceas-package","text":"'Analysis visualization cellular energetics data Agilent Seahorse XF96. Cellular energetics cells make, use, distribute units energy (primarily ATP). Measuring real-time cellular energetics essential understanding tissue cell’s bioenergetic state fuel dependencies. Seahorse machine measures cell’s matrix’s oxygen consumption rate (OCR) – proxy oxidative phosphorylation – extracellular acidification rate – proxy glycolysis. package offers flexible fast analysis plotting capabilities data.'","code":""},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/dev/reference/ceas-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ceas: Cellular Energetics Analysis Software — ceas-package","text":"Maintainer: Rachel House rachel.house@vai.org (ORCID) Authors: James Eapen james.eapen@vai.org (ORCID) contributors: Hui Shen hui.shen@vai.org (ORCID) [funder] Carrie Graveel carrie.graveel@vai.org (ORCID) [funder] Matthew Steensma matthew.steensma@vai.org (ORCID) [funder]","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"Calculates ATP production glycolysis OXPHOS points defined patitioned_data","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"","code":"get_energetics(partitioned_data, ph, pka, buffer)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"partitioned_data data.table organized Seahorse OCR ECAR rates based timepoints assay cycle. Returned partition_data ph pH value energetics calculation (XF Media, 7.5) pka pKa value energetics calculation (XF Media, 6.063) buffer buffer energetics calculation (XF Media, 0.1 mpH/pmol H+)","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"data.table glycolysis OXPHOS rates","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"TODO: check symbols defined Proton production rate (PPR): $$\\text{PPR} = \\frac{\\text{ECAR value}}{\\text{buffer}}$$ $$   \\text{PPR}_{\\text{mito}} = \\frac{10^{\\text{pH}-\\text{pK}_a}}{1+10^{\\text{pH}-\\text{pK}_a}} \\cdot \\frac{\\text{H}^+}{\\text{O}_2} \\cdot \\text{OCR} $$ calculates proton production glucose conversion bicarbonate \\(\\text{H}^+\\) assuming max \\(\\frac{\\text{H}^+}{\\text{O}_2}\\) 1 $$  \\text{PPR}_\\text{glyc} = \\text{PPR} - \\text{PPR}_\\text{resp} $$ calculates proton production glucose conversion lactate + \\(\\text{H}^+\\) Joules ATP (JATP) production: $$   \\text{ATP}_{\\text{glyc}} =    \\Bigl(\\text{PPR}_\\text{glyc} \\cdot \\frac{\\text{ATP}}{\\text{lactate}}\\Bigl) +    \\Bigl(\\text{MITO}_\\text{resp} \\cdot 2 \\cdot \\frac{\\text{P}}{\\text{O}_\\text{glyc}}\\Bigl) $$ $$  \\frac{\\text{ATP}}{\\text{lactate}} = 1 $$ \\(\\frac{\\text{P}}{{\\text{O}_\\text{glyc}}}\\) = 0.167 glucose (0.242 glycogen). $$  \\text{ATP}_\\text{resp} =   \\Bigl(\\text{coupled MITO}_\\text{resp} \\cdot 2 \\cdot \\frac{\\text{P}}{\\text{O}_\\text{oxphos}}\\Bigl) +   \\Bigl(\\text{MITO}_\\text{resp} \\cdot 2 \\cdot \\frac{\\text{P}}{\\text{O}_\\text{TCA}}\\Bigl) $$ \\(\\frac{\\text{P}}{{\\text{O}_\\text{oxphos}}}\\)  = 2.486 \\(\\frac{\\text{P}}{{\\text{O}_\\text{TCA}}}\\) = 0.167.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ATP Production from OXPHOS and Glycolysis — get_energetics","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics <- get_energetics(partitioned_data, ph = 7.4, pka = 6.093, buffer = 0.1) head(energetics, n = 10) #>     exp_group ATP_basal_resp ATP_max_resp ATP_basal_glyc ATP_max_glyc #>        <fctr>          <num>        <num>          <num>        <num> #>  1:   Group_1       1083.877     1125.075      176.42439     524.6518 #>  2:   Group_1       1080.106     1117.407      129.69559     442.5421 #>  3:   Group_1       1233.324     1278.141      141.43402     472.4431 #>  4:   Group_1       1002.058     1042.796       95.13176     390.3254 #>  5:   Group_1       1066.278     1107.473       87.08441     420.6239 #>  6:   Group_1       1088.996     1127.567      107.80548     485.7402 #>  7:   Group_1       1078.165     1114.478      127.14102     469.7935 #>  8:   Group_1       1127.103     1172.258      114.74865     477.7720 #>  9:   Group_1       1022.219     1058.623      137.66492     504.0603 #> 10:   Group_1       1152.477     1195.666      103.91464     426.4569"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"Calculates mean standard deviation ATP production glycolysis OXPHOS points defined partition_data values calculated using get_energetics function","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"","code":"get_energetics_summary(energetics, error_metric = \"ci\", conf_int = 0.95)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"energetics data.table Seahorse OCR ECAR rates (get_energetics) error_metric Whether calculate error standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"list groups data","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_energetics_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate ATP Production Mean and Standard Deviation — get_energetics_summary","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates) energetics_list <- get_energetics(partitioned_data, ph = 7.4, pka = 6.093, buffer = 0.1) energetics_summary <- get_energetics_summary(energetics_list) head(energetics_summary[, c(1:5)], n = 10) #> Key: <exp_group> #>    exp_group count ATP_basal_resp.mean ATP_basal_resp.sd ATP_basal_resp.se #>       <fctr> <int>               <num>             <num>             <num> #> 1:   Group_1    22           1100.0468          72.25935         15.405746 #> 2:   Group_2    24           1136.0653          41.34070          8.438635 #> 3:   Group_3    24           1317.1044          52.53006         10.722653 #> 4:   Group_4    22            626.1267          85.60314         18.250651 head(energetics_summary[, c(1, 2, 6, 7)], n = 10) #> Key: <exp_group> #>    exp_group count ATP_basal_resp.lower_bound ATP_basal_resp.higher_bound #>       <fctr> <int>                      <num>                       <num> #> 1:   Group_1    22                  1069.8521                   1130.2415 #> 2:   Group_2    24                  1119.5259                   1152.6047 #> 3:   Group_3    24                  1296.0883                   1338.1204 #> 4:   Group_4    22                   590.3561                    661.8973"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_rate_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Rates summary — get_rate_summary","title":"Rates summary — get_rate_summary","text":"Summarize OCR ECAR mean bounded standard deviations standard error confidence intervals","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_rate_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rates summary — get_rate_summary","text":"","code":"get_rate_summary(   seahorse_rates,   measure = \"OCR\",   assay,   error_metric = \"ci\",   conf_int = 0.95 )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_rate_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rates summary — get_rate_summary","text":"seahorse_rates data.table Seahorse OCR ECAR rates (imported using read_data function) measure Whether calculate summary \"OCR\" \"ECAR\" assay assay calculate summary (e.g. \"MITO\" \"GLYCO\") error_metric Whether calculate error standard deviations (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_rate_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rates summary — get_rate_summary","text":"data.table means, standard deviations/standard error bounds around mean(sd confidence intervals)","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/get_rate_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rates summary — get_rate_summary","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) rates <- get_rate_summary(   seahorse_rates,   measure = \"OCR\",   assay = \"MCIO\",   error_metric = \"ci\",   conf_int = 0.95 ) head(rates, n = 10) #> Empty data.table (0 rows and 7 cols): exp_group,Measurement,mean,sd,se,lower_bound..."},{"path":"https://jamespeapen.github.io/ceas/dev/reference/make_bioscope_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"Wrapper create 2D plot visualizing mean standard deviation basal maximal ATP production glycolysis OXPHOS experimental group Create Bioenergetic scope plot input Seahorse Wave export, long-form rates excel files","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/make_bioscope_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"","code":"make_bioscope_plot(rep_list, ph, pka, buffer, sheet = 2)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/make_bioscope_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"rep_list list Seahorse Wave excel export files. One file per replicate. Group replicates given experiment single folder, write folder's path \"seahorse_data\". can use `list.files(\"seahorse_data\") \"full.names=TRUE\") get paths files. ph pH value energetics calculation (XF Media, 7.5) pka pKa value energetics calculation (XF Media, 6.063) buffer buffer energetics calculation (XF Media, 0.1 mpH/pmol H+) sheet number excel sheet containing long-form Seahorse data. Default 2 long-form output Seahorse Wave sheet 2","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/make_bioscope_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"ggplot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/make_bioscope_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bioenergetic Scope Plot Shortcut — make_bioscope_plot","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) make_bioscope_plot(rep_list, ph = 7.4, pka = 6.093, buffer = 0.1)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Seahorse data — normalize","title":"Normalize Seahorse data — normalize","text":"Normalizes input data according cell number \\(\\mu\\)g protein. assumes data background normalized.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Seahorse data — normalize","text":"","code":"normalize(seahorse_rates, norm_csv)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Seahorse data — normalize","text":"seahorse_rates seahorse rates table read read_data() function. norm_csv csv file experimental groups column 1 cell count \\(\\mu\\)g protein column 2. Headers ignored.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Seahorse data — normalize","text":"normalzed seahorse_rates data.table","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/normalize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize Seahorse data — normalize","text":"normalization distinct background normalization done Wave software. data background normalized, read_data() output warning showing rows OCR, ECAR PER values greater 0.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize Seahorse data — normalize","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) norm_csv <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"norm.csv\", full.names = TRUE) read.csv(norm_csv) #>   exp_group measure #> 1   Group_1   30000 #> 2   Group_2   30000 #> 3   Group_3    5000 #> 4   Group_4    5000 seahorse_rates <- read_data(rep_list, sheet = 2) head(seahorse_rates, n = 10) #>     Measurement   Well     Time      OCR     ECAR      PER  exp_group #>           <num> <char>    <num>    <num>    <num>    <num>     <char> #>  1:           1    A01 1.304765   0.0000  0.00000   0.0000 Background #>  2:           1    A02 1.304765 305.2426 30.64529 334.4771    Group_1 #>  3:           1    A03 1.304765 307.9862 33.27668 358.4754    Group_1 #>  4:           1    A04 1.304765 339.3399 49.17751 503.4910    Group_2 #>  5:           1    A05 1.304765 321.9398 47.94602 492.2597    Group_2 #>  6:           1    A06 1.304765 323.7962 46.84232 482.1940    Group_2 #>  7:           1    A07 1.304765 379.1455 46.81741 481.9668    Group_3 #>  8:           1    A08 1.304765 391.1478 50.14648 512.3280    Group_3 #>  9:           1    A09 1.304765 393.4523 52.54649 534.2160    Group_3 #> 10:           1    A10 1.304765 217.0543 29.11793 320.5476    Group_4 #>     assay_type replicate #>         <char>     <int> #>  1:       <NA>         1 #>  2:       MITO         1 #>  3:       MITO         1 #>  4:       MITO         1 #>  5:       MITO         1 #>  6:       MITO         1 #>  7:       MITO         1 #>  8:       MITO         1 #>  9:       MITO         1 #> 10:       MITO         1 seahorse_rates.normalized <- normalize(seahorse_rates, norm_csv) head(seahorse_rates.normalized, n = 10) #>     Measurement   Well     Time       OCR      ECAR       PER  exp_group #>           <num> <char>    <num>     <num>     <num>     <num>     <char> #>  1:           1    A01 1.304765   0.00000  0.000000   0.00000 Background #>  2:           1    A02 1.304765  50.87376  5.107549  55.74619    Group_1 #>  3:           1    A03 1.304765  51.33103  5.546114  59.74590    Group_1 #>  4:           1    A04 1.304765  56.55665  8.196252  83.91516    Group_2 #>  5:           1    A05 1.304765  53.65663  7.991003  82.04329    Group_2 #>  6:           1    A06 1.304765  53.96603  7.807053  80.36566    Group_2 #>  7:           1    A07 1.304765 379.14553 46.817412 481.96685    Group_3 #>  8:           1    A08 1.304765 391.14776 50.146484 512.32798    Group_3 #>  9:           1    A09 1.304765 393.45230 52.546486 534.21600    Group_3 #> 10:           1    A10 1.304765 217.05432 29.117934 320.54760    Group_4 #>     assay_type replicate #>         <char>     <int> #>  1:       <NA>         1 #>  2:       MITO         1 #>  3:       MITO         1 #>  4:       MITO         1 #>  5:       MITO         1 #>  6:       MITO         1 #>  7:       MITO         1 #>  8:       MITO         1 #>  9:       MITO         1 #> 10:       MITO         1"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/partition_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Organize Seahorse Data — partition_data","title":"Organize Seahorse Data — partition_data","text":"Organizes Seahorse OCR ECAR rates based defined time points (.e. Measurement column) experiment. time point can specified modifying Mito Glyco Stress Test (.e. 3 measurements per cycle X measurements)","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/partition_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organize Seahorse Data — partition_data","text":"","code":"partition_data(   seahorse_rates,   assay_types = list(basal = \"MITO\", uncoupled = \"MITO\", maxresp = \"MITO\", nonmito =     \"MITO\", no_glucose_glyc = \"GLYCO\", glucose_glyc = \"GLYCO\", max_glyc = \"GLYCO\"),   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc_tp = 3,   glucose_glyc_tp = 6,   max_glyc_tp = 8 )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/partition_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organize Seahorse Data — partition_data","text":"seahorse_rates data.table OCR ECAR rates returned read_data assay_types list configures data partitioning based type assay. See details. basal_tp Basal respiration time point. Must less uncoupled_tp uncoupled_tp ATP-coupled respiration time point. Must less maxresp_tp maxresp_tp Maximal uncoupled respiration time point. Must less nonmito_tp nonmito_tp Non-mitochondrial respiration time point. Must larger maxresp_tp no_glucose_glyc_tp glucose added acidification time point. Must less glucose_glyc_tp glucose_glyc_tp Glucose-associated acidification time point. Must less max_glyc_tp max_glyc_tp Maximal acidification time point. Must less twodg_glyc_tp","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/partition_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organize Seahorse Data — partition_data","text":"list named time points assay cycle","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/partition_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Organize Seahorse Data — partition_data","text":"Note: use term 'max' package documentation mean maximal experimental OCR ECAR values rather absolute biological maximums. partition_data sets rates data ATP calculations get_energetics function. , takes list assay_types named values basal, uncoupled, maxresp, nonmito, no_glucose_glyc, glucose_glyc, max_glyc. default setting, configured experiment Mito Glyco assays. However, partitioning can configured experimental conditions. MITO data: Respiratory control ratio (RCR) glycolytic capacity (GC) assay: Data according Mookerjee et al. 2017 J Biol Chem;292:7189-207. Also see vignette.","code":"partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"MITO\",     uncoupled = \"MITO\",     maxresp = \"MITO\",     nonmito = \"MITO\",     no_glucose_glyc = NA,     glucose_glyc = \"MITO\",     max_glyc = NA   ),   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc_tp = NA,   glucose_glyc_tp = 3,   max_glyc_tp = NA ) partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"RCR\",     uncoupled = \"RCR\",     maxresp = \"RCR,\"     nonmito = \"RCR\",     no_glucose_glyc = NA,     glucose_glyc = \"GC\",     max_glyc = \"GC\"   ),   basal_tp = 3,   uncoupled_tp = 6,   maxresp_tp = 8,   nonmito_tp = 12,   no_glucose_glyc = NA,   glucose_glyc_tp = 3,   max_glyc_tp = 9 ) partitioned_data <- partition_data(   seahorse_rates,   assay_types = list(     basal = \"RefAssay\",     uncoupled = \"RefAssay\",     maxresp = NA,     nonmito = \"RefAssay\",     no_glucose_glyc = \"RefAssay\",     glucose_glyc = \"RefAssay\",     max_glyc = NA   ),   basal_tp = 5,   uncoupled_tp = 10,   nonmito_tp = 12,   maxresp = NA,   no_glucose_glyc_tp = 1,   glucose_glyc_tp = 5,   max_glyc = NA )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/partition_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Organize Seahorse Data — partition_data","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) partitioned_data <- partition_data(seahorse_rates)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rate_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Rate plot — rate_plot","title":"Rate plot — rate_plot","text":"Generate OCR ECAR plots","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rate_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rate plot — rate_plot","text":"","code":"rate_plot(   seahorse_rates,   measure = \"OCR\",   assay = \"MITO\",   error_bar = \"ci\",   conf_int = 0.95,   group_label = \"Experimental group\" )"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rate_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rate plot — rate_plot","text":"seahorse_rates data.table Seahorse OCR ECAR rates (imported using read_data function) measure Whether plot \"OCR\" \"ECAR\" assay assay plot (e.g. \"MITO\" \"GLYCO\") error_bar Whether plot error bars standard deviation (\"sd\") confidence intervals (\"ci\") conf_int confidence interval percentage. 0 1 group_label Label experimental group populate legend title","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rate_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rate plot — rate_plot","text":"ggplot","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/rate_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rate plot — rate_plot","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) rate_plot(seahorse_rates, measure = \"OCR\", error_bar = \"ci\", conf_int = 0.95)"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Seahorse Wave Excel File — read_data","title":"Read Seahorse Wave Excel File — read_data","text":"Reads input seahore data excel Seahorse Wave File.  assumes data background normalized.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Seahorse Wave Excel File — read_data","text":"","code":"read_data(rep_list, norm = NULL, sheet = 2, delimiter = \" \")"},{"path":"https://jamespeapen.github.io/ceas/dev/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Seahorse Wave Excel File — read_data","text":"rep_list list Seahorse Wave excel export files. One file per replicate. data directory called \"seahorse_data\", use list.files(\"seahorse_data\", pattern = \"*.xlsx\", full.names = TRUE) make list excel files. norm csv file experimental groups normalization values. Leave unset normalization required. See normalize(). sheet number excel sheet containing long-form Seahorse data. Default 2 long-form output Seahorse Wave sheet 2 delimiter delimiter group name assay type Group column wave output. e.g. \"Group1 MITO\" use space character delimiter.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Seahorse Wave Excel File — read_data","text":"seahorse_rates table","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/reference/read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Seahorse Wave Excel File — read_data","text":"","code":"rep_list <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"*.xlsx\", full.names = TRUE) seahorse_rates <- read_data(rep_list, sheet = 2) head(seahorse_rates, n = 10) #>     Measurement   Well     Time      OCR     ECAR      PER  exp_group #>           <num> <char>    <num>    <num>    <num>    <num>     <char> #>  1:           1    A01 1.304765   0.0000  0.00000   0.0000 Background #>  2:           1    A02 1.304765 305.2426 30.64529 334.4771    Group_1 #>  3:           1    A03 1.304765 307.9862 33.27668 358.4754    Group_1 #>  4:           1    A04 1.304765 339.3399 49.17751 503.4910    Group_2 #>  5:           1    A05 1.304765 321.9398 47.94602 492.2597    Group_2 #>  6:           1    A06 1.304765 323.7962 46.84232 482.1940    Group_2 #>  7:           1    A07 1.304765 379.1455 46.81741 481.9668    Group_3 #>  8:           1    A08 1.304765 391.1478 50.14648 512.3280    Group_3 #>  9:           1    A09 1.304765 393.4523 52.54649 534.2160    Group_3 #> 10:           1    A10 1.304765 217.0543 29.11793 320.5476    Group_4 #>     assay_type replicate #>         <char>     <int> #>  1:       <NA>         1 #>  2:       MITO         1 #>  3:       MITO         1 #>  4:       MITO         1 #>  5:       MITO         1 #>  6:       MITO         1 #>  7:       MITO         1 #>  8:       MITO         1 #>  9:       MITO         1 #> 10:       MITO         1  # normalization norm_csv <- system.file(\"extdata\", package = \"ceas\") |>   list.files(pattern = \"norm.csv\", full.names = TRUE) seahorse_rates.norm <- read_data(rep_list, norm = norm_csv, sheet = 2) head(seahorse_rates.norm, n = 10) #>     Measurement   Well     Time       OCR      ECAR       PER  exp_group #>           <num> <char>    <num>     <num>     <num>     <num>     <char> #>  1:           1    A01 1.304765   0.00000  0.000000   0.00000 Background #>  2:           1    A02 1.304765  50.87376  5.107549  55.74619    Group_1 #>  3:           1    A03 1.304765  51.33103  5.546114  59.74590    Group_1 #>  4:           1    A04 1.304765  56.55665  8.196252  83.91516    Group_2 #>  5:           1    A05 1.304765  53.65663  7.991003  82.04329    Group_2 #>  6:           1    A06 1.304765  53.96603  7.807053  80.36566    Group_2 #>  7:           1    A07 1.304765 379.14553 46.817412 481.96685    Group_3 #>  8:           1    A08 1.304765 391.14776 50.146484 512.32798    Group_3 #>  9:           1    A09 1.304765 393.45230 52.546486 534.21600    Group_3 #> 10:           1    A10 1.304765 217.05432 29.117934 320.54760    Group_4 #>     assay_type replicate #>         <char>     <int> #>  1:       <NA>         1 #>  2:       MITO         1 #>  3:       MITO         1 #>  4:       MITO         1 #>  5:       MITO         1 #>  6:       MITO         1 #>  7:       MITO         1 #>  8:       MITO         1 #>  9:       MITO         1 #> 10:       MITO         1"},{"path":[]},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-033","dir":"Changelog","previous_headings":"","what":"ceas 0.3.3","title":"ceas 0.3.3","text":"Don’t divide 0 normalizing already 0; PER now normalized OCR ECAR.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-032","dir":"Changelog","previous_headings":"","what":"ceas 0.3.2","title":"ceas 0.3.2","text":"Warn data normalized checking “Background” group’s OCR, ECAR, PER values 0.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-031","dir":"Changelog","previous_headings":"","what":"ceas 0.3.1","title":"ceas 0.3.1","text":"Add assay type argument plot ECAR/OCR meaningfully assay types previously summarized instead just one.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-030","dir":"Changelog","previous_headings":"","what":"ceas 0.3.0","title":"ceas 0.3.0","text":"Add normalize(), cell count/protein mass normalization function. read_data now can take csv file cell counts protein mass (μg) experimental groups normalize data. example csv provided dataset 4 experimental groups:","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-020","dir":"Changelog","previous_headings":"","what":"ceas 0.2.0","title":"ceas 0.2.0","text":"Add delimiter group assay labels argument read_data() support delimiters .","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-011","dir":"Changelog","previous_headings":"","what":"ceas 0.1.1","title":"ceas 0.1.1","text":"Fix calculation coupled mitochondrial respiration (#4). correction published https://doi.org/10.1074/jbc.AAC118.004855.","code":""},{"path":"https://jamespeapen.github.io/ceas/dev/news/index.html","id":"ceas-010","dir":"Changelog","previous_headings":"","what":"ceas 0.1.0","title":"ceas 0.1.0","text":"First release initial submission publication.","code":""}]
